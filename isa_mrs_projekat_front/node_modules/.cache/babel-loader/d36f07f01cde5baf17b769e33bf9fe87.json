{"ast":null,"code":"import axios from \"axios/index\";\nimport store from \"@/store\";\nexport default {\n  name: \"PasswordChangeForm\",\n\n  data() {\n    return {\n      rules: [{\n        message: 'One lowercase letter required.',\n        regex: /[a-z]+/\n      }, {\n        message: \"One uppercase letter required.\",\n        regex: /[A-Z]+/\n      }, {\n        message: \"8-20 characters required.\",\n        regex: /.{8,20}/\n      }, {\n        message: \"One number required.\",\n        regex: /[0-9]+/\n      }],\n      oldPassword: '',\n      password: '',\n      checkPassword: '',\n      submitted: false,\n      type: 'password'\n    };\n  },\n\n  methods: {\n    resetPasswords() {\n      axios.put(\"/Users/passChange\", {\n        email: this.email,\n        oldPassword: this.oldPassword,\n        newPassword: this.password\n      }, {\n        headers: {\n          Authorization: \"Bearer \" + this.accessToken\n        }\n      }).then(() => {\n        this.$notify({\n          title: \"Password Change Notification\",\n          text: \"Password change was successful.\",\n          position: \"bottom right\",\n          type: \"success\"\n        });\n        this.$store.dispatch(\"first_login\", false);\n      }).catch(error => {\n        if (error.response.status === 404) {\n          this.$notify({\n            title: \"User Not Found\",\n            text: \"User with the specified e-mail was not found!\",\n            type: \"warn\"\n          });\n        } else if (error.response.status === 401) {\n          this.$notify({\n            title: \"Authorization Failed\",\n            text: \"Old Password is not valid!\",\n            type: \"error\"\n          });\n        } else if (error.response.status === 500) {\n          this.$notify({\n            title: \"Internal Server Error\",\n            text: \"Something went wrong on the server! Please try again later...\",\n            type: \"error\"\n          });\n        }\n      });\n    }\n\n  },\n  computed: {\n    isDisabled() {\n      return !(this.passwordsFilled && !this.notSamePasswords && this.passwordValidation.valid) && this.isNewPassword;\n    },\n\n    isNewPassword() {\n      if (this.passwordsFilled) {\n        return this.oldPassword !== this.password;\n      }\n\n      return true;\n    },\n\n    notSamePasswords() {\n      if (this.passwordsFilled) {\n        return this.password !== this.checkPassword;\n      } else {\n        return false;\n      }\n    },\n\n    passwordsFilled() {\n      return this.oldPassword !== '' && this.password !== '' && this.checkPassword !== '';\n    },\n\n    passwordValidation() {\n      let errors = [];\n\n      if (this.password !== '') {\n        for (let condition of this.rules) {\n          if (!condition.regex.test(this.password)) {\n            errors.push(condition.message);\n          }\n        }\n\n        if (errors.length === 0) {\n          return {\n            valid: true,\n            errors\n          };\n        } else {\n          return {\n            valid: false,\n            errors\n          };\n        }\n      } else {\n        return {\n          valid: true,\n          errors\n        };\n      }\n    },\n\n    accessToken() {\n      return store.state.access_token;\n    },\n\n    email() {\n      return store.state.email;\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","store","name","data","rules","message","regex","oldPassword","password","checkPassword","submitted","type","methods","resetPasswords","put","email","newPassword","headers","Authorization","accessToken","then","$notify","title","text","position","$store","dispatch","catch","error","response","status","computed","isDisabled","passwordsFilled","notSamePasswords","passwordValidation","valid","isNewPassword","errors","condition","test","push","length","state","access_token"],"sourceRoot":"","sources":["C:\\Users\\Sa≈°ka\\Downloads\\MRS_ISA\\isa_mrs_projekat_front\\src\\components\\GeneralComponents\\UserAccountForms\\PasswordChangeForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"row\">\r\n    <div class=\"col-2\"></div>\r\n    <div class=\"col-8 pt-5\">\r\n      <form class=\"px-4 py-3 rounded content-center form\">\r\n        <div class=\"row\">\r\n          <div class=\"col-2\"></div>\r\n          <div class=\"col-8\">\r\n            <div class=\"form-text\">\r\n              <h3>Password change</h3>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"inputPassword1\">Old Password</label>\r\n              <input type=\"password\" id=\"inputPassword1\" v-model=\"oldPassword\" class=\"form-control col-sm-auto col-lg-4\" aria-describedby=\"passwordHelpBlock\" placeholder=\"Old password\">\r\n              <p style=\"color: #e23c52\" v-if='!isNewPassword'>New password can't be same as old.</p>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"inputPassword2\">New Password</label>\r\n              <input type=\"password\" id=\"inputPassword2\" v-model=password class=\"form-control col-sm-auto col-lg-4\" aria-describedby=\"passwordHelpBlock\" placeholder=\"New password\">\r\n              <p style=\"color: #e23c52\" v-if='!passwordValidation.valid'>{{ passwordValidation.errors[0] }}</p>\r\n              <small id=\"passwordHelpBlock\" class=\"form-text text-muted\">\r\n                Your password must be 8-20 characters long, contain letters and numbers, and must not contain spaces, special characters, or emoji.\r\n              </small>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"inputPassword3\">Confirm Password</label>\r\n              <input type=\"password\" id=\"inputPassword3\" v-model.lazy='checkPassword' class=\"form-control col-sm-auto col-lg-4\" aria-describedby=\"passwordHelpBlock\" placeholder=\"Confirm password\">\r\n              <p style=\"color: #e23c52\" v-if='notSamePasswords'>Passwords don't match.</p>\r\n            </div>\r\n            <div class=\"text-center\">\r\n              <button class=\"btn mt-3\" @click.prevent='resetPasswords' :disabled='isDisabled'>\r\n                Submit\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-2\"></div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n    <div class=\"col-2\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios/index\";\r\nimport store from \"@/store\";\r\n\r\nexport default {\r\n  name: \"PasswordChangeForm\",\r\n  data () {\r\n    return {\r\n      rules: [\r\n        { message:'One lowercase letter required.', regex:/[a-z]+/ },\r\n        { message:\"One uppercase letter required.\",  regex:/[A-Z]+/ },\r\n        { message:\"8-20 characters required.\", regex:/.{8,20}/ },\r\n        { message:\"One number required.\", regex:/[0-9]+/ }\r\n      ],\r\n      oldPassword:'',\r\n      password:'',\r\n      checkPassword:'',\r\n      submitted:false,\r\n      type:'password'\r\n    }\r\n  },\r\n  methods: {\r\n    resetPasswords () {\r\n      axios.put(\"/Users/passChange\", {\r\n        email: this.email,\r\n        oldPassword: this.oldPassword,\r\n        newPassword: this.password\r\n      }, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + this.accessToken\r\n        }\r\n      })\r\n      .then(() => {\r\n        this.$notify({\r\n          title: \"Password Change Notification\",\r\n          text: \"Password change was successful.\",\r\n          position: \"bottom right\",\r\n          type: \"success\"\r\n        });\r\n        this.$store.dispatch(\"first_login\", false);\r\n      })\r\n      .catch((error) =>{\r\n        if (error.response.status===404) {\r\n          this.$notify({\r\n            title: \"User Not Found\",\r\n            text: \"User with the specified e-mail was not found!\" ,\r\n            type: \"warn\"\r\n          })\r\n        } else if (error.response.status===401) {\r\n          this.$notify({\r\n            title: \"Authorization Failed\",\r\n            text: \"Old Password is not valid!\",\r\n            type: \"error\"\r\n          })\r\n        } else if (error.response.status===500) {\r\n          this.$notify({\r\n            title: \"Internal Server Error\",\r\n            text: \"Something went wrong on the server! Please try again later...\",\r\n            type: \"error\"\r\n          })\r\n        }\r\n      });\r\n    }\r\n  },\r\n  computed: {\r\n    isDisabled() {\r\n      return !(this.passwordsFilled && !this.notSamePasswords && this.passwordValidation.valid) && this.isNewPassword\r\n    },\r\n    isNewPassword() {\r\n      if (this.passwordsFilled) {\r\n        return this.oldPassword !== this.password;\r\n      }\r\n      return true;\r\n    },\r\n    notSamePasswords () {\r\n      if (this.passwordsFilled) {\r\n        return (this.password !== this.checkPassword)\r\n      } else {\r\n        return false\r\n      }\r\n    },\r\n    passwordsFilled () {\r\n      return (this.oldPassword !== '' && this.password !== '' && this.checkPassword !== '')\r\n    },\r\n    passwordValidation () {\r\n      let errors = []\r\n      if (this.password !== ''){\r\n        for (let condition of this.rules) {\r\n          if (!condition.regex.test(this.password)) {\r\n            errors.push(condition.message)\r\n          }\r\n        }\r\n        if (errors.length === 0) {\r\n          return { valid:true, errors }\r\n        } else {\r\n          return { valid:false, errors }\r\n        }\r\n      }\r\n      else {\r\n        return { valid:true, errors }\r\n      }\r\n    },\r\n    accessToken() {\r\n      return store.state.access_token;\r\n    },\r\n    email() {\r\n      return store.state.email;\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n  h3 {\r\n    text-align: center;\r\n  }\r\n</style>"]},"metadata":{},"sourceType":"module"}