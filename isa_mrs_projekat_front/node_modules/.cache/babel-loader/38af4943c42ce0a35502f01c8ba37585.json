{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { Chart, BarController, DoughnutController, LineController, PieController, PolarAreaController, RadarController, BubbleController, ScatterController } from 'chart.js';\nimport { defineComponent, shallowRef, ref, watch, onMounted, onBeforeUnmount, toRaw, h, isProxy } from 'vue';\nvar ChartEmits;\n\n(function (ChartEmits) {\n  ChartEmits[\"ChartRendered\"] = \"chart:rendered\";\n  ChartEmits[\"ChartUpdated\"] = \"chart:updated\";\n  ChartEmits[\"ChartDestroyed\"] = \"chart:destroyed\";\n  ChartEmits[\"LabelsUpdated\"] = \"labels:updated\";\n})(ChartEmits || (ChartEmits = {}));\n\nfunction chartCreate(createChartFunction, chartData, chartOptions, context) {\n  createChartFunction(chartData, chartOptions);\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartRendered);\n  }\n}\n\nfunction chartUpdate(chart, context) {\n  chart.update();\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartUpdated);\n  }\n}\n\nfunction chartDestroy(chart, context) {\n  chart.destroy();\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartDestroyed);\n  }\n}\n\nfunction getChartData(data, datasetIdKey) {\n  const nextData = {\n    labels: typeof data.labels === \"undefined\" ? [] : [...data.labels],\n    datasets: []\n  };\n  setChartDatasets(nextData, { ...data\n  }, datasetIdKey);\n  return nextData;\n}\n\nfunction setChartDatasets(oldData, newData, datasetIdKey) {\n  const addedDatasets = [];\n  oldData.datasets = newData.datasets.map(nextDataset => {\n    // given the new set, find it's current match\n    const currentDataset = oldData.datasets.find(dataset => dataset[datasetIdKey] === nextDataset[datasetIdKey]); // There is no original to update, so simply add new one\n\n    if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n      return { ...nextDataset\n      };\n    }\n\n    addedDatasets.push(currentDataset);\n    Object.assign(currentDataset, nextDataset);\n    return currentDataset;\n  });\n}\n\nfunction setChartLabels(chart, labels, context) {\n  chart.data.labels = labels;\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.LabelsUpdated);\n  }\n}\n\nfunction setChartOptions(chart, options) {\n  chart.options = { ...options\n  };\n}\n\nfunction compareData(newData, oldData) {\n  // Get new and old DataSet Labels\n  const newDatasetLabels = newData.datasets.map(dataset => {\n    return dataset.label;\n  });\n  const oldDatasetLabels = oldData.datasets.map(dataset => {\n    return dataset.label;\n  }); // Check if Labels are equal and if dataset length is equal\n\n  return oldData.datasets.length === newData.datasets.length && newDatasetLabels.every((value, index) => value === oldDatasetLabels[index]);\n}\n\nconst templateError = \"Please remove the <template></template> tags from your chart component. See https://vue-chartjs.org/guide/#vue-single-file-components\";\nconst chartUpdateError = \"Update ERROR: chart instance not found\";\n\nconst generateChart = (chartId, chartType, chartController) => {\n  return defineComponent({\n    props: {\n      chartData: {\n        type: Object,\n        required: true\n      },\n      chartOptions: {\n        type: Object,\n        default: () => {}\n      },\n      datasetIdKey: {\n        type: String,\n        default: \"label\"\n      },\n      chartId: {\n        type: String,\n        default: chartId\n      },\n      width: {\n        type: Number,\n        default: 400\n      },\n      height: {\n        type: Number,\n        default: 400\n      },\n      cssClasses: {\n        type: String,\n        default: \"\"\n      },\n      styles: {\n        type: Object,\n        default: () => {}\n      },\n      plugins: {\n        type: Array,\n        default: () => []\n      }\n    },\n\n    setup(props, context) {\n      Chart.register(chartController);\n\n      const _chart = shallowRef(null);\n\n      const canvasEl = ref(null);\n\n      function renderChart(data, options) {\n        if (_chart.value !== null) {\n          chartDestroy(toRaw(_chart.value), context);\n        }\n\n        if (canvasEl.value === null) {\n          throw new Error(templateError);\n        } else {\n          const chartData = getChartData(data, props.datasetIdKey);\n          const canvasEl2DContext = canvasEl.value.getContext(\"2d\");\n\n          if (canvasEl2DContext !== null) {\n            _chart.value = new Chart(canvasEl2DContext, {\n              type: chartType,\n              data: isProxy(data) ? new Proxy(chartData, {}) : chartData,\n              options,\n              plugins: props.plugins\n            });\n          }\n        }\n      }\n\n      function chartDataHandler(newValue, oldValue) {\n        const newData = isProxy(newValue) ? toRaw(newValue) : { ...newValue\n        };\n        const oldData = isProxy(oldValue) ? toRaw(oldValue) : { ...oldValue\n        };\n\n        if (Object.keys(oldData).length > 0) {\n          const chart = toRaw(_chart.value);\n          const isEqualLabelsAndDatasetsLength = compareData(newData, oldData);\n\n          if (isEqualLabelsAndDatasetsLength && chart !== null) {\n            setChartDatasets(chart === null || chart === void 0 ? void 0 : chart.data, newData, props.datasetIdKey);\n\n            if (newData.labels !== undefined) {\n              setChartLabels(chart, newData.labels, context);\n            }\n\n            updateChart();\n          } else {\n            if (chart !== null) {\n              chartDestroy(chart, context);\n            }\n\n            chartCreate(renderChart, props.chartData, props.chartOptions, context);\n          }\n        } else {\n          if (_chart.value !== null) {\n            chartDestroy(toRaw(_chart.value), context);\n          }\n\n          chartCreate(renderChart, props.chartData, props.chartOptions, context);\n        }\n      }\n\n      function chartOptionsHandler(options) {\n        const chart = toRaw(_chart.value);\n\n        if (chart !== null) {\n          setChartOptions(chart, options);\n          updateChart();\n        } else {\n          chartCreate(renderChart, props.chartData, props.chartOptions, context);\n        }\n      }\n\n      function updateChart() {\n        const chart = toRaw(_chart.value);\n\n        if (chart !== null) {\n          chartUpdate(chart, context);\n        } else {\n          console.error(chartUpdateError);\n        }\n      }\n\n      watch(() => props.chartData, (newValue, oldValue) => chartDataHandler(newValue, oldValue), {\n        deep: true\n      });\n      watch(() => props.chartOptions, newValue => chartOptionsHandler(newValue), {\n        deep: true\n      });\n      onMounted(() => {\n        if (\"datasets\" in props.chartData && props.chartData.datasets.length > 0) {\n          chartCreate(renderChart, props.chartData, props.chartOptions, context);\n        }\n      });\n      onBeforeUnmount(() => {\n        if (_chart.value !== null) {\n          chartDestroy(toRaw(_chart.value), context);\n        }\n      });\n      context.expose({\n        chart: _chart,\n        updateChart\n      });\n      return () => h(\"div\", {\n        style: props.styles,\n        class: props.cssClasses\n      }, [h(\"canvas\", {\n        id: props.chartId,\n        width: props.width,\n        height: props.height,\n        ref: canvasEl\n      })]);\n    }\n\n  });\n};\n\nconst Bar = /* #__PURE__ */generateChart(\"bar-chart\", \"bar\", BarController);\nconst Doughnut = /* #__PURE__ */generateChart(\"doughnut-chart\", \"doughnut\", DoughnutController);\nconst Line = /* #__PURE__ */generateChart(\"line-chart\", \"line\", LineController);\nconst Pie = /* #__PURE__ */generateChart(\"pie-chart\", \"pie\", PieController);\nconst PolarArea = /* #__PURE__ */generateChart(\"polar-chart\", \"polarArea\", PolarAreaController);\nconst Radar = /* #__PURE__ */generateChart(\"radar-chart\", \"radar\", RadarController);\nconst Bubble = /* #__PURE__ */generateChart(\"bubble-chart\", \"bubble\", BubbleController);\nconst Scatter = /* #__PURE__ */generateChart(\"scatter-chart\", \"scatter\", ScatterController);\nexport { Bar, Bubble, Doughnut, Line, Pie, PolarArea, Radar, Scatter, generateChart };","map":{"version":3,"mappings":"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","names":["ChartEmits","ChartRendered","ChartUpdated","ChartDestroyed","LabelsUpdated","chartCreate","createChartFunction","chartData","chartOptions","context","undefined","emit","chartUpdate","chart","update","chartDestroy","destroy","getChartData","data","datasetIdKey","nextData","labels","datasets","setChartDatasets","oldData","newData","addedDatasets","map","nextDataset","currentDataset","find","dataset","includes","push","Object","assign","setChartLabels","setChartOptions","options","compareData","newDatasetLabels","label","oldDatasetLabels","length","every","value","index","templateError","chartUpdateError","generateChart","chartId","chartType","chartController","defineComponent","props","type","required","default","String","width","Number","height","cssClasses","styles","plugins","Array","setup","ChartJS","register","_chart","shallowRef","canvasEl","ref","renderChart","toRaw","Error","canvasEl2DContext","getContext","isProxy","Proxy","chartDataHandler","newValue","oldValue","keys","isEqualLabelsAndDatasetsLength","updateChart","chartOptionsHandler","console","error","watch","deep","onMounted","onBeforeUnmount","expose","h","style","class","id","Bar","BarController","Doughnut","DoughnutController","Line","LineController","Pie","PieController","PolarArea","PolarAreaController","Radar","RadarController","Bubble","BubbleController","Scatter","ScatterController"],"sources":["../src/utils.ts","../src/BaseCharts.ts"],"sourcesContent":["import type { ChartType, ChartDataset, DefaultDataPoint } from 'chart.js'\n\nimport type { TChartData, TChartOptions, TypedChartJS } from './types'\n\nimport { SetupContext } from 'vue'\n\nexport enum ChartEmits {\n  ChartRendered = 'chart:rendered',\n  ChartUpdated = 'chart:updated',\n  ChartDestroyed = 'chart:destroyed',\n  LabelsUpdated = 'labels:updated'\n}\n\nexport function chartCreate<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  createChartFunction: (\n    data: TChartData<TType, TData, TLabel>,\n    options: TChartOptions<TType>\n  ) => void,\n  chartData: TChartData<TType, TData, TLabel>,\n  chartOptions: TChartOptions<TType>,\n  context?: SetupContext\n): void {\n  createChartFunction(chartData, chartOptions)\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartRendered)\n  }\n}\n\nexport function chartUpdate<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: TypedChartJS<TType, TData, TLabel>, context?: SetupContext): void {\n  chart.update()\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartUpdated)\n  }\n}\n\nexport function chartDestroy<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: TypedChartJS<TType, TData, TLabel>, context?: SetupContext): void {\n  chart.destroy()\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartDestroyed)\n  }\n}\n\nexport function getChartData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  data: TChartData<TType, TData, TLabel>,\n  datasetIdKey: string\n): TChartData<TType, TData, TLabel> {\n  const nextData = {\n    labels: typeof data.labels === 'undefined' ? [] : [...data.labels],\n    datasets: []\n  }\n\n  setChartDatasets(nextData, { ...data }, datasetIdKey)\n  return nextData\n}\n\nexport function setChartDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  oldData: TChartData<TType, TData, TLabel>,\n  newData: TChartData<TType, TData, TLabel>,\n  datasetIdKey: string\n): void {\n  const addedDatasets: ChartDataset<TType, TData>[] = []\n\n  oldData.datasets = newData.datasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = oldData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      )\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset }\n      }\n\n      addedDatasets.push(currentDataset)\n\n      Object.assign(currentDataset, nextDataset)\n\n      return currentDataset\n    }\n  ) as ChartDataset<TType, TData>[]\n}\n\nexport function setChartLabels<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  chart: TypedChartJS<TType, TData, TLabel>,\n  labels: TLabel[] | undefined,\n  context?: SetupContext\n): void {\n  chart.data.labels = labels\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.LabelsUpdated)\n  }\n}\n\nexport function setChartOptions<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  chart: TypedChartJS<TType, TData, TLabel>,\n  options: TChartOptions<TType>\n): void {\n  chart.options = { ...options }\n}\n\nexport function compareData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  newData: TChartData<TType, TData, TLabel>,\n  oldData: TChartData<TType, TData, TLabel>\n): boolean {\n  // Get new and old DataSet Labels\n  const newDatasetLabels = newData.datasets.map(dataset => {\n    return dataset.label\n  })\n\n  const oldDatasetLabels = oldData.datasets.map(dataset => {\n    return dataset.label\n  })\n\n  // Check if Labels are equal and if dataset length is equal\n  return (\n    oldData.datasets.length === newData.datasets.length &&\n    newDatasetLabels.every((value, index) => value === oldDatasetLabels[index])\n  )\n}\n\nexport const templateError =\n  'Please remove the <template></template> tags from your chart component. See https://vue-chartjs.org/guide/#vue-single-file-components'\n\nexport const chartUpdateError = 'Update ERROR: chart instance not found'\n","import {\n  Chart as ChartJS,\n  BarController,\n  BubbleController,\n  DoughnutController,\n  LineController,\n  PieController,\n  PolarAreaController,\n  RadarController,\n  ScatterController\n} from 'chart.js'\n\nimport type {\n  ChartType,\n  ChartComponentLike,\n  DefaultDataPoint,\n  ChartOptions,\n  Plugin\n} from 'chart.js'\n\nimport {\n  defineComponent,\n  ref,\n  shallowRef,\n  h,\n  onMounted,\n  onBeforeUnmount,\n  watch,\n  isProxy,\n  toRaw,\n  PropType\n} from 'vue'\n\nimport {\n  chartCreate,\n  chartDestroy,\n  chartUpdate,\n  getChartData,\n  setChartLabels,\n  setChartDatasets,\n  compareData,\n  templateError,\n  chartUpdateError,\n  setChartOptions\n} from './utils'\n\nimport type {\n  TChartData,\n  TChartOptions,\n  TypedChartJS,\n  TypedChartComponent\n} from './types'\n\nexport const generateChart = <\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  chartId: string,\n  chartType: TType,\n  chartController: ChartComponentLike\n): TypedChartComponent<TType, TData, TLabel> =>\n  defineComponent({\n    props: {\n      chartData: {\n        type: Object as PropType<TChartData<TType, TData, TLabel>>,\n        required: true\n      },\n      chartOptions: {\n        type: Object as PropType<TChartOptions<TType>>,\n        default: () => {}\n      },\n      datasetIdKey: {\n        type: String,\n        default: 'label'\n      },\n      chartId: {\n        type: String,\n        default: chartId\n      },\n      width: {\n        type: Number,\n        default: 400\n      },\n      height: {\n        type: Number,\n        default: 400\n      },\n      cssClasses: {\n        type: String,\n        default: ''\n      },\n      styles: {\n        type: Object as PropType<Partial<CSSStyleDeclaration>>,\n        default: () => {}\n      },\n      plugins: {\n        type: Array as PropType<Plugin<TType>[]>,\n        default: () => []\n      }\n    },\n    setup(props, context) {\n      ChartJS.register(chartController)\n\n      const _chart = shallowRef<TypedChartJS<TType, TData, TLabel> | null>(null)\n      const canvasEl = ref<HTMLCanvasElement | null>(null)\n\n      function renderChart(\n        data: TChartData<TType, TData, TLabel>,\n        options: TChartOptions<TType>\n      ): void {\n        if (_chart.value !== null) {\n          chartDestroy<TType, TData, TLabel>(toRaw(_chart.value), context)\n        }\n\n        if (canvasEl.value === null) {\n          throw new Error(templateError)\n        } else {\n          const chartData = getChartData<TType, TData, TLabel>(\n            data,\n            props.datasetIdKey\n          )\n          const canvasEl2DContext = canvasEl.value.getContext('2d')\n\n          if (canvasEl2DContext !== null) {\n            _chart.value = new ChartJS<TType, TData, TLabel>(\n              canvasEl2DContext,\n              {\n                type: chartType,\n                data: isProxy(data) ? new Proxy(chartData, {}) : chartData,\n                options,\n                plugins: props.plugins\n              }\n            )\n          }\n        }\n      }\n\n      function chartDataHandler(\n        newValue: TChartData<TType, TData, TLabel>,\n        oldValue: TChartData<TType, TData, TLabel>\n      ): void {\n        const newData = isProxy(newValue) ? toRaw(newValue) : { ...newValue }\n        const oldData = isProxy(oldValue) ? toRaw(oldValue) : { ...oldValue }\n\n        if (Object.keys(oldData).length > 0) {\n          const chart = toRaw(_chart.value)\n\n          const isEqualLabelsAndDatasetsLength = compareData<\n            TType,\n            TData,\n            TLabel\n          >(newData, oldData)\n\n          if (isEqualLabelsAndDatasetsLength && chart !== null) {\n            setChartDatasets<TType, TData, TLabel>(\n              chart?.data,\n              newData,\n              props.datasetIdKey\n            )\n\n            if (newData.labels !== undefined) {\n              setChartLabels<TType, TData, TLabel>(\n                chart,\n                newData.labels,\n                context\n              )\n            }\n\n            updateChart()\n          } else {\n            if (chart !== null) {\n              chartDestroy<TType, TData, TLabel>(chart, context)\n            }\n\n            chartCreate<TType, TData, TLabel>(\n              renderChart,\n              props.chartData,\n              props.chartOptions as ChartOptions<TType>,\n              context\n            )\n          }\n        } else {\n          if (_chart.value !== null) {\n            chartDestroy<TType, TData, TLabel>(toRaw(_chart.value), context)\n          }\n\n          chartCreate<TType, TData, TLabel>(\n            renderChart,\n            props.chartData,\n            props.chartOptions as ChartOptions<TType>,\n            context\n          )\n        }\n      }\n\n      function chartOptionsHandler(options: TChartOptions<TType>): void {\n        const chart = toRaw(_chart.value)\n\n        if (chart !== null) {\n          setChartOptions<TType, TData, TLabel>(chart, options)\n          updateChart()\n        } else {\n          chartCreate<TType, TData, TLabel>(\n            renderChart,\n            props.chartData,\n            props.chartOptions as ChartOptions<TType>,\n            context\n          )\n        }\n      }\n\n      function updateChart(): void {\n        const chart = toRaw(_chart.value)\n\n        if (chart !== null) {\n          chartUpdate<TType, TData, TLabel>(chart, context)\n        } else {\n          console.error(chartUpdateError)\n        }\n      }\n\n      watch(\n        () => props.chartData,\n        (\n          newValue: TChartData<TType, TData, TLabel>,\n          oldValue: TChartData<TType, TData, TLabel>\n        ) => chartDataHandler(newValue, oldValue),\n        { deep: true }\n      )\n\n      watch(\n        () => props.chartOptions,\n        newValue => chartOptionsHandler(newValue as ChartOptions<TType>),\n        { deep: true }\n      )\n\n      onMounted(() => {\n        if (\n          'datasets' in props.chartData &&\n          props.chartData.datasets.length > 0\n        ) {\n          chartCreate<TType, TData, TLabel>(\n            renderChart,\n            props.chartData,\n            props.chartOptions as ChartOptions<TType>,\n            context\n          )\n        }\n      })\n\n      onBeforeUnmount(() => {\n        if (_chart.value !== null) {\n          chartDestroy(toRaw(_chart.value), context)\n        }\n      })\n\n      context.expose({\n        chart: _chart,\n        updateChart\n      })\n\n      return () =>\n        h('div', { style: props.styles, class: props.cssClasses }, [\n          h('canvas', {\n            id: props.chartId,\n            width: props.width,\n            height: props.height,\n            ref: canvasEl\n          })\n        ])\n    }\n  }) as any\n\nexport const Bar = /* #__PURE__ */ generateChart(\n  'bar-chart',\n  'bar',\n  BarController\n)\n\nexport const Doughnut = /* #__PURE__ */ generateChart(\n  'doughnut-chart',\n  'doughnut',\n  DoughnutController\n)\n\nexport const Line = /* #__PURE__ */ generateChart(\n  'line-chart',\n  'line',\n  LineController\n)\n\nexport const Pie = /* #__PURE__ */ generateChart(\n  'pie-chart',\n  'pie',\n  PieController\n)\n\nexport const PolarArea = /* #__PURE__ */ generateChart(\n  'polar-chart',\n  'polarArea',\n  PolarAreaController\n)\n\nexport const Radar = /* #__PURE__ */ generateChart(\n  'radar-chart',\n  'radar',\n  RadarController\n)\n\nexport const Bubble = /* #__PURE__ */ generateChart(\n  'bubble-chart',\n  'bubble',\n  BubbleController\n)\n\nexport const Scatter = /* #__PURE__ */ generateChart(\n  'scatter-chart',\n  'scatter',\n  ScatterController\n)\n\nexport default {\n  Bar,\n  Doughnut,\n  Line,\n  Pie,\n  PolarArea,\n  Radar,\n  Bubble,\n  Scatter\n}\n"]},"metadata":{},"sourceType":"module"}