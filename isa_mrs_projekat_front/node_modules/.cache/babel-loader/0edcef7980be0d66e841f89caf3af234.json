{"ast":null,"code":"import { VueTelInput } from 'vue3-tel-input';\nimport 'vue3-tel-input/dist/vue3-tel-input.css';\nimport store from \"@/store\";\nimport axios from \"axios\";\nimport { toggleProcessing } from \"@/components/state\";\nexport default {\n  name: \"RegistrationPage\",\n  components: {\n    VueTelInput\n  },\n\n  data() {\n    return {\n      rules: [{\n        message: 'One lowercase letter required.',\n        regex: /[a-z]+/\n      }, {\n        message: \"One uppercase letter required.\",\n        regex: /[A-Z]+/\n      }, {\n        message: \"8-20 characters required.\",\n        regex: /.{8,20}/\n      }, {\n        message: \"One number required.\",\n        regex: /[0-9]+/\n      }],\n      options: null,\n      checkPassword: '',\n      onlyCountries: ['RS', 'BA', 'HR', 'ME', 'SI', 'MK'],\n      phoneInput: null,\n      user: {\n        userType: \"Client\",\n        name: null,\n        surname: null,\n        phone: null,\n        email: null,\n        password: '',\n        reason: null,\n        address: {\n          street: null,\n          number: null,\n          city: null,\n          country: null,\n          latitude: null,\n          longitude: null\n        }\n      },\n      nameIsEntered: true,\n      surnameIsEntered: true,\n      emailIsEntered: true,\n      countryIsEntered: true,\n      cityIsEntered: true,\n      streetIsEntered: true,\n      numberIsEntered: true,\n      phoneIsEntered: true,\n      passwordISEntered: true,\n      confirmationPasswordIsEntered: true,\n      reasonIsEntered: true,\n      addressIsValid: true,\n      phoneIsValid: true,\n      reasonIsValid: true,\n      emailIsUnique: true,\n      isUpdate: false\n    };\n  },\n\n  mounted() {\n    this.isUpdate = this.$route.params.id !== undefined;\n\n    if (this.isUpdate) {\n      axios.get(\"/Users/getUser\", {\n        headers: {\n          Authorization: \"Bearer \" + this.$store.getters.access_token\n        }\n      }).then(response => {\n        this.user = response.data;\n        this.phoneInput = this.user.phone;\n      }).catch(() => {});\n    }\n  },\n\n  computed: {\n    accessToken() {\n      return store.state.access_token;\n    },\n\n    isAdmin() {\n      return store.state.isSuperAdmin;\n    },\n\n    isRentalObjectOwner() {\n      return this.user.userType !== \"Client\" && this.user.userType !== \"Admin\" && this.user.userType !== \"SuperAdmin\";\n    },\n\n    isNameEntered() {\n      return Boolean(this.user.name);\n    },\n\n    isSurnameEntered() {\n      return Boolean(this.user.surname);\n    },\n\n    isEmailEntered() {\n      return Boolean(this.user.email);\n    },\n\n    isCountryEntered() {\n      return Boolean(this.user.address.country);\n    },\n\n    isCityEntered() {\n      return Boolean(this.user.address.city);\n    },\n\n    isStreetEntered() {\n      return Boolean(this.user.address.street);\n    },\n\n    isNumberEntered() {\n      return Boolean(this.user.address.number);\n    },\n\n    isPasswordEntered() {\n      return Boolean(this.user.password);\n    },\n\n    isConfirmationPasswordEntered() {\n      return Boolean(this.checkPassword);\n    },\n\n    isReasonEntered() {\n      return Boolean(this.user.reason);\n    },\n\n    notSamePasswords() {\n      if (this.isPasswordEntered && this.isConfirmationPasswordEntered) {\n        return this.user.password !== this.checkPassword;\n      } else {\n        return false;\n      }\n    },\n\n    passwordValidation() {\n      let errors = [];\n\n      if (this.user.password !== '') {\n        for (let condition of this.rules) {\n          if (!condition.regex.test(this.user.password)) {\n            errors.push(condition.message);\n          }\n        }\n\n        if (errors.length === 0) {\n          return {\n            valid: true,\n            errors\n          };\n        } else {\n          return {\n            valid: false,\n            errors\n          };\n        }\n      } else {\n        return {\n          valid: true,\n          errors\n        };\n      }\n    },\n\n    emailValidation() {\n      if (this.isEmailEntered) {\n        let emailRule = {\n          regex: /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}/\n        };\n        return emailRule.regex.test(this.user.email);\n      }\n\n      return true;\n    }\n\n  },\n  methods: {\n    update() {\n      toggleProcessing();\n\n      if (this.isDataEntered()) {\n        if (!this.isPhoneValid()) {\n          this.phoneIsValid = false;\n          return false;\n        } else {\n          const apiKey = 'VrDrl5BjEA0Whvb-chHbFz96HV4qlCXB-yoiTRRLKno';\n          const url = 'https://geocoder.ls.hereapi.com/6.2/geocode.json' + '?apiKey=' + apiKey + '&housenumber=' + this.user.address.number + '&street=' + this.user.address.street + '&city=' + this.user.address.city + '&country=' + this.user.address.country;\n          fetch(url).then(response => response.json()).then(data => {\n            const responseView = data.Response.View;\n\n            if (responseView.length === 0) {\n              this.addressIsValid = false;\n            } else {\n              const location = responseView[0].Result[0].Location.DisplayPosition;\n              const address = responseView[0].Result[0].Location.Address;\n              this.user.address.city = this.transliterate(address.City);\n              this.user.address.country = this.transliterate(address.AdditionalData[0].value);\n              this.user.address.street = this.transliterate(address.Street);\n              this.user.address.longitude = location.Longitude;\n              this.user.address.latitude = location.Latitude;\n              this.addressIsValid = true;\n              axios.put(\"/Users/updateUser\", this.user, {\n                headers: {\n                  Authorization: \"Bearer \" + this.accessToken\n                }\n              }).then(() => {\n                this.$notify({\n                  title: \"Successful update\",\n                  text: \"You have successfully updated your profile.\",\n                  position: \"bottom right\",\n                  type: \"success\"\n                });\n                toggleProcessing();\n              }).catch(error => {\n                if (!error.response) {\n                  this.$notify({\n                    title: \"Server error\",\n                    text: \"Server is currently off. Please try again later...\",\n                    type: \"error\"\n                  });\n                  toggleProcessing();\n                } else if (error.response.status === 500) {\n                  this.$notify({\n                    title: \"Internal Server Error\",\n                    text: \"Something went wrong on the server! Please try again later...\",\n                    position: \"bottom right\",\n                    type: \"error\"\n                  });\n                  toggleProcessing();\n                }\n              });\n            }\n          }).catch(() => {\n            this.addressIsValid = false;\n          });\n        }\n      }\n    },\n\n    emailChanged() {\n      this.emailIsEntered = true;\n      this.emailIsUnique = true;\n    },\n\n    submit() {\n      if (this.isUpdate) {\n        this.update();\n      } else {\n        if (this.passwordValidation.valid && !this.notSamePasswords) {\n          if (this.isDataEntered()) {\n            this.isDataCorrect();\n          }\n        }\n      }\n    },\n\n    makeRequest() {\n      if (this.isAdmin) {\n        axios.post(\"/Users/addUser\", this.user, {\n          headers: {\n            Authorization: \"Bearer \" + this.accessToken\n          }\n        }).then(() => {\n          this.$notify({\n            title: \"Successful adding\",\n            text: \"You have successfully added a new user. Verification email has been sent to \" + this.user.email + \".\",\n            position: \"bottom right\",\n            type: \"success\"\n          });\n          toggleProcessing();\n          this.$router.push(\"/admin/users\");\n        }).catch(error => {\n          if (!error.response) {\n            this.$notify({\n              title: \"Server error\",\n              text: \"Server is currently off. Please try again later...\",\n              type: \"error\"\n            });\n            toggleProcessing();\n          } else if (error.response.status === 422) {\n            toggleProcessing();\n            this.emailIsUnique = false;\n          } else if (error.response.status === 500) {\n            this.$notify({\n              title: \"Internal Server Error\",\n              text: \"Something went wrong on the server! Please try again later...\",\n              position: \"bottom right\",\n              type: \"error\"\n            });\n            toggleProcessing();\n          }\n        });\n      } else if (this.accessToken !== null) {\n        this.isUpdate = true;\n      } else {\n        axios.post(\"/Requests/signUp\", this.user, {\n          headers: {\n            Authorization: \"Bearer \" + this.accessToken\n          }\n        }).then(() => {\n          let message = \"Successful Sign Up\";\n          if (this.user.userType === \"Client\") message += \"Verification email has been sent to \" + this.user.email + \". Please go and check your mail.\";else message += \"Your request is pending. Keep checking your email for a response.\";\n          this.$notify({\n            title: \"Sign up\",\n            text: message,\n            position: \"bottom right\",\n            type: \"success\"\n          });\n          toggleProcessing();\n          this.$router.push(\"/\");\n        }).catch(error => {\n          if (!error.response) {\n            this.$notify({\n              title: \"Server error\",\n              text: \"Server is currently off. Please try again later...\",\n              type: \"error\"\n            });\n            toggleProcessing();\n          } else if (error.response.status === 422) {\n            toggleProcessing();\n            this.emailIsUnique = false;\n          } else if (error.response.status === 400) {\n            this.$notify({\n              title: \"Invalid Request Status\",\n              text: \"Bad registration request.\",\n              position: \"bottom right\",\n              type: \"warn\"\n            });\n            toggleProcessing();\n          } else if (error.response.status === 500) {\n            this.$notify({\n              title: \"Internal Server Error\",\n              text: \"Something went wrong on the server! Please try again later...\",\n              position: \"bottom right\",\n              type: \"error\"\n            });\n            toggleProcessing();\n          }\n        });\n      }\n    },\n\n    isDataEntered() {\n      if (!this.isNameEntered) {\n        this.nameIsEntered = false;\n        return false;\n      }\n\n      if (!this.isSurnameEntered) {\n        this.surnameIsEntered = false;\n        return false;\n      }\n\n      if (!this.isEmailEntered) {\n        this.emailIsEntered = false;\n        return false;\n      }\n\n      if (!this.isPasswordEntered && !this.isAdmin && !this.isUpdate) {\n        this.passwordISEntered = false;\n        return false;\n      }\n\n      if (!this.isConfirmationPasswordEntered && !this.isAdmin && !this.isUpdate) {\n        this.confirmationPasswordIsEntered = false;\n        return false;\n      }\n\n      if (!this.isCountryEntered) {\n        this.countryIsEntered = false;\n        return false;\n      }\n\n      if (!this.isCityEntered) {\n        this.cityIsEntered = false;\n        return false;\n      }\n\n      if (!this.isStreetEntered) {\n        this.streetIsEntered = false;\n        return false;\n      }\n\n      if (!this.isNumberEntered) {\n        this.numberIsEntered = false;\n        return false;\n      }\n\n      if (this.isRentalObjectOwner && !this.isReasonEntered && !this.isAdmin && !this.isUpdate) {\n        this.reasonIsEntered = false;\n        return false;\n      }\n\n      return true;\n    },\n\n    async isDataCorrect() {\n      if (!this.isPhoneValid()) {\n        this.phoneIsValid = false;\n        return false;\n      } else if (this.isRentalObjectOwner && this.isReasonValid() && !this.isAdmin && !this.isUpdate) {\n        this.reasonIsValid = false;\n        return false;\n      } else {\n        this.validateAddress();\n      }\n    },\n\n    onTelephoneInput(phone, phoneObject) {\n      this.phoneIsEntered = true;\n\n      if (phoneObject?.valid) {\n        this.phoneIsValid = true;\n        this.user.phone = phoneObject.number;\n      } else if (phoneObject) {\n        this.user.phone = null;\n      }\n    },\n\n    isReasonValid() {\n      return this.user.reason.length >= 50;\n    },\n\n    isPhoneValid() {\n      return Boolean(this.user.phone);\n    },\n\n    validateAddress() {\n      toggleProcessing();\n      const apiKey = 'VrDrl5BjEA0Whvb-chHbFz96HV4qlCXB-yoiTRRLKno';\n      const url = 'https://geocoder.ls.hereapi.com/6.2/geocode.json' + '?apiKey=' + apiKey + '&housenumber=' + this.user.address.number + '&street=' + this.user.address.street + '&city=' + this.user.address.city + '&country=' + this.user.address.country;\n      fetch(url).then(response => response.json()).then(data => {\n        const responseView = data.Response.View;\n\n        if (responseView.length === 0) {\n          this.addressIsValid = false;\n        } else {\n          const location = responseView[0].Result[0].Location.DisplayPosition;\n          const address = responseView[0].Result[0].Location.Address;\n          this.user.address.city = this.transliterate(address.City);\n          this.user.address.country = this.transliterate(address.AdditionalData[0].value);\n          this.user.address.street = this.transliterate(address.Street);\n          this.user.address.longitude = location.Longitude;\n          this.user.address.latitude = location.Latitude;\n          this.addressIsValid = true;\n          this.makeRequest();\n        }\n      }).catch(() => {\n        this.addressIsValid = false;\n      });\n    },\n\n    transliterate(word) {\n      let letters = {\n        \"Б\": \"B\",\n        \"В\": \"V\",\n        \"Г\": \"G\",\n        \"Д\": \"D\",\n        \"Ђ\": \"Đ\",\n        \"Ж\": \"Ž\",\n        \"З\": \"Z\",\n        \"И\": \"I\",\n        \"К\": \"K\",\n        \"Л\": \"L\",\n        \"Љ\": \"Lj\",\n        \"М\": \"M\",\n        \"Н\": \"N\",\n        \"Њ\": \"Nj\",\n        \"П\": \"P\",\n        \"Р\": \"R\",\n        \"С\": \"S\",\n        \"Ћ\": \"Ć\",\n        \"У\": \"U\",\n        \"Ф\": \"F\",\n        \"Х\": \"H\",\n        \"Ц\": \"C\",\n        \"Ч\": \"Č\",\n        \"Џ\": \"Dž\",\n        \"Ш\": \"Š\",\n        \"б\": \"b\",\n        \"в\": \"v\",\n        \"г\": \"g\",\n        \"д\": \"d\",\n        \"ђ\": \"đ\",\n        \"ж\": \"ž\",\n        \"з\": \"z\",\n        \"и\": \"i\",\n        \"к\": \"k\",\n        \"л\": \"l\",\n        \"љ\": \"lj\",\n        \"м\": \"m\",\n        \"н\": \"n\",\n        \"њ\": \"nj\",\n        \"п\": \"p\",\n        \"р\": \"r\",\n        \"с\": \"s\",\n        \"т\": \"t\",\n        \"ћ\": \"ć\",\n        \"у\": \"u\",\n        \"ф\": \"f\",\n        \"х\": \"h\",\n        \"ц\": \"c\",\n        \"ч\": \"č\",\n        \"џ\": \"dž\",\n        \"ш\": \"š\"\n      };\n      return word.split('').map(function (char) {\n        return letters[char] || char;\n      }).join(\"\");\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAuHA,SAASA,WAAT,QAA6B,gBAA7B;AACA,OAAO,wCAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,gBAAR,QAA+B,oBAA/B;AAEA,eAAe;AACbC,MAAI,EAAE,kBADO;AAEbC,YAAU,EAAE;AAACL;AAAD,GAFC;;AAGbM,MAAI,GAAG;AACL,WAAO;AACLC,WAAK,EAAE,CACL;AAAEC,eAAO,EAAC,gCAAV;AAA4CC,aAAK,EAAC;AAAlD,OADK,EAEL;AAAED,eAAO,EAAC,gCAAV;AAA6CC,aAAK,EAAC;AAAnD,OAFK,EAGL;AAAED,eAAO,EAAC,2BAAV;AAAuCC,aAAK,EAAC;AAA7C,OAHK,EAIL;AAAED,eAAO,EAAC,sBAAV;AAAkCC,aAAK,EAAC;AAAxC,OAJK,CADF;AAOLC,aAAO,EAAE,IAPJ;AAQLC,mBAAa,EAAC,EART;AASLC,mBAAa,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,CATV;AAULC,gBAAU,EAAE,IAVP;AAWLC,UAAI,EAAE;AACJC,gBAAQ,EAAE,QADN;AAEJX,YAAI,EAAE,IAFF;AAGJY,eAAO,EAAE,IAHL;AAIJC,aAAK,EAAE,IAJH;AAKJC,aAAK,EAAE,IALH;AAMJC,gBAAQ,EAAE,EANN;AAOJC,cAAM,EAAE,IAPJ;AAQJC,eAAO,EAAE;AACPC,gBAAM,EAAE,IADD;AAEPC,gBAAM,EAAE,IAFD;AAGPC,cAAI,EAAE,IAHC;AAIPC,iBAAO,EAAE,IAJF;AAKPC,kBAAQ,EAAE,IALH;AAMPC,mBAAS,EAAE;AANJ;AARL,OAXD;AA4BLC,mBAAa,EAAE,IA5BV;AA6BLC,sBAAgB,EAAE,IA7Bb;AA8BLC,oBAAc,EAAE,IA9BX;AA+BLC,sBAAgB,EAAE,IA/Bb;AAgCLC,mBAAa,EAAE,IAhCV;AAiCLC,qBAAe,EAAE,IAjCZ;AAkCLC,qBAAe,EAAE,IAlCZ;AAmCLC,oBAAc,EAAE,IAnCX;AAoCLC,uBAAiB,EAAE,IApCd;AAqCLC,mCAA6B,EAAE,IArC1B;AAsCLC,qBAAe,EAAE,IAtCZ;AAuCLC,oBAAc,EAAE,IAvCX;AAwCLC,kBAAY,EAAE,IAxCT;AAyCLC,mBAAa,EAAE,IAzCV;AA0CLC,mBAAa,EAAE,IA1CV;AA2CLC,cAAQ,EAAE;AA3CL,KAAP;AA6CD,GAjDY;;AAkDbC,SAAO,GAAG;AACR,SAAKD,QAAL,GAAgB,KAAKE,MAAL,CAAYC,MAAZ,CAAmBC,EAAnB,KAA0BC,SAA1C;;AACA,QAAI,KAAKL,QAAT,EAAmB;AACjBzC,WAAK,CAAC+C,GAAN,CAAU,gBAAV,EAA4B;AAC1BC,eAAO,EAAE;AACPC,uBAAa,EAAE,YAAY,KAAKC,MAAL,CAAYC,OAAZ,CAAoBC;AADxC;AADiB,OAA5B,EAKCC,IALD,CAKOC,QAAD,IAAc;AAClB,aAAK1C,IAAL,GAAY0C,QAAQ,CAAClD,IAArB;AACA,aAAKO,UAAL,GAAkB,KAAKC,IAAL,CAAUG,KAA5B;AACD,OARD,EASCwC,KATD,CASO,MAAM,CAEZ,CAXD;AAYF;AACD,GAlEY;;AAmEbC,UAAQ,EAAE;AACRC,eAAW,GAAG;AACZ,aAAO1D,KAAK,CAAC2D,KAAN,CAAYN,YAAnB;AACD,KAHO;;AAIRO,WAAO,GAAG;AACR,aAAO5D,KAAK,CAAC2D,KAAN,CAAYE,YAAnB;AACD,KANO;;AAORC,uBAAmB,GAAG;AACpB,aAAQ,KAAKjD,IAAL,CAAUC,QAAV,KAAuB,QAAvB,IAAmC,KAAKD,IAAL,CAAUC,QAAV,KAAuB,OAA1D,IAAqE,KAAKD,IAAL,CAAUC,QAAV,KAAuB,YAApG;AACD,KATO;;AAURiD,iBAAa,GAAG;AACd,aAAOC,OAAO,CAAC,KAAKnD,IAAL,CAAUV,IAAX,CAAd;AACD,KAZO;;AAaR8D,oBAAgB,GAAG;AACjB,aAAOD,OAAO,CAAC,KAAKnD,IAAL,CAAUE,OAAX,CAAd;AACD,KAfO;;AAgBRmD,kBAAc,GAAG;AACf,aAAOF,OAAO,CAAC,KAAKnD,IAAL,CAAUI,KAAX,CAAd;AACD,KAlBO;;AAmBRkD,oBAAgB,GAAG;AACjB,aAAOH,OAAO,CAAC,KAAKnD,IAAL,CAAUO,OAAV,CAAkBI,OAAnB,CAAd;AACD,KArBO;;AAsBR4C,iBAAa,GAAG;AACd,aAAOJ,OAAO,CAAC,KAAKnD,IAAL,CAAUO,OAAV,CAAkBG,IAAnB,CAAd;AACD,KAxBO;;AAyBR8C,mBAAe,GAAG;AAChB,aAAOL,OAAO,CAAC,KAAKnD,IAAL,CAAUO,OAAV,CAAkBC,MAAnB,CAAd;AACD,KA3BO;;AA4BRiD,mBAAe,GAAG;AAChB,aAAON,OAAO,CAAC,KAAKnD,IAAL,CAAUO,OAAV,CAAkBE,MAAnB,CAAd;AACD,KA9BO;;AA+BRiD,qBAAiB,GAAG;AAClB,aAAOP,OAAO,CAAC,KAAKnD,IAAL,CAAUK,QAAX,CAAd;AACD,KAjCO;;AAkCRsD,iCAA6B,GAAG;AAC9B,aAAOR,OAAO,CAAC,KAAKtD,aAAN,CAAd;AACD,KApCO;;AAqCR+D,mBAAe,GAAG;AAChB,aAAOT,OAAO,CAAC,KAAKnD,IAAL,CAAUM,MAAX,CAAd;AACD,KAvCO;;AAwCRuD,oBAAe,GAAK;AAClB,UAAI,KAAKH,iBAAL,IAA0B,KAAKC,6BAAnC,EAAkE;AAChE,eAAQ,KAAK3D,IAAL,CAAUK,QAAV,KAAuB,KAAKR,aAApC;AACF,OAFA,MAEO;AACL,eAAO,KAAP;AACF;AACD,KA9CO;;AA+CRiE,sBAAiB,GAAK;AACpB,UAAIC,MAAK,GAAI,EAAb;;AACA,UAAI,KAAK/D,IAAL,CAAUK,QAAV,KAAuB,EAA3B,EAA8B;AAC5B,aAAK,IAAI2D,SAAT,IAAsB,KAAKvE,KAA3B,EAAkC;AAChC,cAAI,CAACuE,SAAS,CAACrE,KAAV,CAAgBsE,IAAhB,CAAqB,KAAKjE,IAAL,CAAUK,QAA/B,CAAL,EAA+C;AAC7C0D,kBAAM,CAACG,IAAP,CAAYF,SAAS,CAACtE,OAAtB;AACF;AACF;;AACA,YAAIqE,MAAM,CAACI,MAAP,KAAkB,CAAtB,EAAyB;AACvB,iBAAO;AAAEC,iBAAK,EAAC,IAAR;AAAcL;AAAd,WAAP;AACF,SAFA,MAEO;AACL,iBAAO;AAAEK,iBAAK,EAAC,KAAR;AAAeL;AAAf,WAAP;AACF;AACF,OAXA,MAYK;AACH,eAAO;AAAEK,eAAK,EAAC,IAAR;AAAcL;AAAd,SAAP;AACF;AACD,KAhEO;;AAiERM,mBAAe,GAAG;AAChB,UAAI,KAAKhB,cAAT,EAAyB;AACvB,YAAIiB,SAAQ,GAAI;AAAC3E,eAAK,EAAC;AAAP,SAAhB;AACA,eAAO2E,SAAS,CAAC3E,KAAV,CAAgBsE,IAAhB,CAAqB,KAAKjE,IAAL,CAAUI,KAA/B,CAAP;AACF;;AACA,aAAO,IAAP;AACF;;AAvEQ,GAnEG;AA4IbmE,SAAO,EAAE;AACPC,UAAM,GAAG;AACPnF,sBAAgB;;AAChB,UAAI,KAAKoF,aAAL,EAAJ,EAA0B;AACxB,YAAI,CAAC,KAAKC,YAAL,EAAL,EAAyB;AACvB,eAAKhD,YAAL,GAAoB,KAApB;AACA,iBAAO,KAAP;AACF,SAHA,MAGO;AACL,gBAAMiD,MAAK,GAAI,6CAAf;AACA,gBAAMC,GAAE,GAAI,qDACR,UADQ,GACKD,MADL,GAER,eAFQ,GAEU,KAAK3E,IAAL,CAAUO,OAAV,CAAkBE,MAF5B,GAGR,UAHQ,GAGK,KAAKT,IAAL,CAAUO,OAAV,CAAkBC,MAHvB,GAIR,QAJQ,GAIG,KAAKR,IAAL,CAAUO,OAAV,CAAkBG,IAJrB,GAKR,WALQ,GAKM,KAAKV,IAAL,CAAUO,OAAV,CAAkBI,OALpC;AAMAkE,eAAK,CAACD,GAAD,CAAL,CACKnC,IADL,CACUC,QAAO,IAAKA,QAAQ,CAACoC,IAAT,EADtB,EAEKrC,IAFL,CAEUjD,IAAG,IAAK;AACZ,kBAAMuF,YAAW,GAAIvF,IAAI,CAACwF,QAAL,CAAcC,IAAnC;;AACA,gBAAIF,YAAY,CAACZ,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,mBAAK1C,cAAL,GAAsB,KAAtB;AACF,aAFA,MAGK;AACH,oBAAMyD,QAAO,GAAIH,YAAY,CAAC,CAAD,CAAZ,CAAgBI,MAAhB,CAAuB,CAAvB,EAA0BC,QAA1B,CAAmCC,eAApD;AACA,oBAAM9E,OAAM,GAAIwE,YAAY,CAAC,CAAD,CAAZ,CAAgBI,MAAhB,CAAuB,CAAvB,EAA0BC,QAA1B,CAAmCE,OAAnD;AACA,mBAAKtF,IAAL,CAAUO,OAAV,CAAkBG,IAAlB,GAAyB,KAAK6E,aAAL,CAAmBhF,OAAO,CAACiF,IAA3B,CAAzB;AACA,mBAAKxF,IAAL,CAAUO,OAAV,CAAkBI,OAAlB,GAA4B,KAAK4E,aAAL,CAAmBhF,OAAO,CAACkF,cAAR,CAAuB,CAAvB,EAA0BC,KAA7C,CAA5B;AACA,mBAAK1F,IAAL,CAAUO,OAAV,CAAkBC,MAAlB,GAA2B,KAAK+E,aAAL,CAAmBhF,OAAO,CAACoF,MAA3B,CAA3B;AACA,mBAAK3F,IAAL,CAAUO,OAAV,CAAkBM,SAAlB,GAA8BqE,QAAQ,CAACU,SAAvC;AACA,mBAAK5F,IAAL,CAAUO,OAAV,CAAkBK,QAAlB,GAA6BsE,QAAQ,CAACW,QAAtC;AACA,mBAAKpE,cAAL,GAAsB,IAAtB;AACArC,mBAAK,CAAC0G,GAAN,CAAU,mBAAV,EAA+B,KAAK9F,IAApC,EAA0C;AACxCoC,uBAAO,EAAE;AACPC,+BAAa,EAAE,YAAY,KAAKQ;AADzB;AAD+B,eAA1C,EAKCJ,IALD,CAKM,MAAM;AACV,qBAAKsD,OAAL,CAAa;AACXC,uBAAK,EAAE,mBADI;AAEXC,sBAAI,EAAE,6CAFK;AAGXC,0BAAQ,EAAE,cAHC;AAIXC,sBAAI,EAAE;AAJK,iBAAb;AAMA9G,gCAAgB;AACjB,eAbD,EAcCsD,KAdD,CAcOyD,KAAI,IAAK;AACd,oBAAI,CAACA,KAAK,CAAC1D,QAAX,EAAqB;AACnB,uBAAKqD,OAAL,CAAa;AACXC,yBAAK,EAAE,cADI;AAEXC,wBAAI,EAAE,oDAFK;AAGXE,wBAAI,EAAE;AAHK,mBAAb;AAKA9G,kCAAgB;AAClB,iBAPA,MAOO,IAAI+G,KAAK,CAAC1D,QAAN,CAAe2D,MAAf,KAA0B,GAA9B,EAAmC;AACxC,uBAAKN,OAAL,CAAa;AACXC,yBAAK,EAAE,uBADI;AAEXC,wBAAI,EAAE,+DAFK;AAGXC,4BAAQ,EAAE,cAHC;AAIXC,wBAAI,EAAE;AAJK,mBAAb;AAMA9G,kCAAgB;AAClB;AACD,eA/BD;AAgCF;AACD,WAjDL,EAkDKsD,KAlDL,CAkDW,MAAM;AACX,iBAAKlB,cAAL,GAAsB,KAAtB;AACD,WApDL;AAqDF;AACF;AACD,KAtEM;;AAuEP6E,gBAAY,GAAG;AACb,WAAKtF,cAAL,GAAsB,IAAtB;AACA,WAAKY,aAAL,GAAqB,IAArB;AACD,KA1EM;;AA2EP2E,UAAM,GAAG;AACP,UAAI,KAAK1E,QAAT,EAAmB;AACjB,aAAK2C,MAAL;AACF,OAFA,MAGK;AACH,YAAI,KAAKV,kBAAL,CAAwBM,KAAxB,IAAiC,CAAC,KAAKP,gBAA3C,EAA6D;AAC3D,cAAI,KAAKY,aAAL,EAAJ,EAA0B;AACxB,iBAAK+B,aAAL;AACF;AACF;AACF;AACD,KAtFM;;AAuFPC,eAAW,GAAG;AACZ,UAAI,KAAK1D,OAAT,EAAkB;AAChB3D,aAAK,CAACsH,IAAN,CAAW,gBAAX,EAA6B,KAAK1G,IAAlC,EAAwC;AACtCoC,iBAAO,EAAE;AACPC,yBAAa,EAAE,YAAY,KAAKQ;AADzB;AAD6B,SAAxC,EAKCJ,IALD,CAKM,MAAM;AACV,eAAKsD,OAAL,CAAc;AACZC,iBAAK,EAAE,mBADK;AAEZC,gBAAI,EAAE,iFAAiF,KAAKjG,IAAL,CAAUI,KAA3F,GAAmG,GAF7F;AAGZ8F,oBAAQ,EAAE,cAHE;AAIZC,gBAAI,EAAE;AAJM,WAAd;AAMA9G,0BAAgB;AAChB,eAAKsH,OAAL,CAAazC,IAAb,CAAkB,cAAlB;AACD,SAdD,EAeCvB,KAfD,CAeOyD,KAAI,IAAK;AACd,cAAI,CAACA,KAAK,CAAC1D,QAAX,EAAqB;AACnB,iBAAKqD,OAAL,CAAa;AACXC,mBAAK,EAAE,cADI;AAEXC,kBAAI,EAAE,oDAFK;AAGXE,kBAAI,EAAE;AAHK,aAAb;AAKA9G,4BAAgB;AAClB,WAPA,MAOO,IAAI+G,KAAK,CAAC1D,QAAN,CAAe2D,MAAf,KAA0B,GAA9B,EAAmC;AACxChH,4BAAgB;AAChB,iBAAKuC,aAAL,GAAqB,KAArB;AACF,WAHO,MAGA,IAAIwE,KAAK,CAAC1D,QAAN,CAAe2D,MAAf,KAA0B,GAA9B,EAAmC;AACxC,iBAAKN,OAAL,CAAa;AACXC,mBAAK,EAAE,uBADI;AAEXC,kBAAI,EAAE,+DAFK;AAGXC,sBAAQ,EAAE,cAHC;AAIXC,kBAAI,EAAE;AAJK,aAAb;AAMA9G,4BAAgB;AAClB;AACD,SAnCD;AAoCF,OArCA,MAsCK,IAAI,KAAKwD,WAAL,KAAqB,IAAzB,EAA+B;AAClC,aAAKhB,QAAL,GAAgB,IAAhB;AACF,OAFK,MAGA;AACHzC,aAAK,CAACsH,IAAN,CAAW,kBAAX,EAA+B,KAAK1G,IAApC,EAA0C;AACxCoC,iBAAO,EAAE;AACPC,yBAAa,EAAE,YAAY,KAAKQ;AADzB;AAD+B,SAA1C,EAKCJ,IALD,CAKM,MAAM;AACV,cAAI/C,OAAM,GAAI,oBAAd;AACA,cAAG,KAAKM,IAAL,CAAUC,QAAV,KAAuB,QAA1B,EAAoCP,OAAM,IAAK,yCAAyC,KAAKM,IAAL,CAAUI,KAAnD,GAA2D,kCAAtE,CAApC,KACKV,OAAM,IAAK,mEAAX;AACL,eAAKqG,OAAL,CAAc;AACZC,iBAAK,EAAE,SADK;AAEZC,gBAAI,EAAEvG,OAFM;AAGZwG,oBAAQ,EAAE,cAHE;AAIZC,gBAAI,EAAE;AAJM,WAAd;AAMA9G,0BAAgB;AAChB,eAAKsH,OAAL,CAAazC,IAAb,CAAkB,GAAlB;AACD,SAjBD,EAkBCvB,KAlBD,CAkBOyD,KAAI,IAAK;AACd,cAAI,CAACA,KAAK,CAAC1D,QAAX,EAAqB;AACnB,iBAAKqD,OAAL,CAAa;AACXC,mBAAK,EAAE,cADI;AAEXC,kBAAI,EAAE,oDAFK;AAGXE,kBAAI,EAAE;AAHK,aAAb;AAKA9G,4BAAgB;AAClB,WAPA,MAOO,IAAI+G,KAAK,CAAC1D,QAAN,CAAe2D,MAAf,KAA0B,GAA9B,EAAmC;AACxChH,4BAAgB;AAChB,iBAAKuC,aAAL,GAAqB,KAArB;AACF,WAHO,MAGA,IAAIwE,KAAK,CAAC1D,QAAN,CAAe2D,MAAf,KAA0B,GAA9B,EAAmC;AACxC,iBAAKN,OAAL,CAAa;AACXC,mBAAK,EAAE,wBADI;AAEXC,kBAAI,EAAE,2BAFK;AAGXC,sBAAQ,EAAE,cAHC;AAIXC,kBAAI,EAAE;AAJK,aAAb;AAMA9G,4BAAgB;AAClB,WARO,MAQA,IAAI+G,KAAK,CAAC1D,QAAN,CAAe2D,MAAf,KAA0B,GAA9B,EAAmC;AACxC,iBAAKN,OAAL,CAAa;AACXC,mBAAK,EAAE,uBADI;AAEXC,kBAAI,EAAE,+DAFK;AAGXC,sBAAQ,EAAE,cAHC;AAIXC,kBAAI,EAAE;AAJK,aAAb;AAMA9G,4BAAgB;AAClB;AACD,SA9CD;AA+CF;AAED,KAnLM;;AAoLPoF,iBAAa,GAAG;AACd,UAAI,CAAC,KAAKvB,aAAV,EAAyB;AACvB,aAAKpC,aAAL,GAAqB,KAArB;AACA,eAAO,KAAP;AACF;;AACA,UAAI,CAAC,KAAKsC,gBAAV,EAA4B;AAC1B,aAAKrC,gBAAL,GAAwB,KAAxB;AACA,eAAO,KAAP;AACF;;AACA,UAAI,CAAC,KAAKsC,cAAV,EAA0B;AACxB,aAAKrC,cAAL,GAAsB,KAAtB;AACA,eAAO,KAAP;AACF;;AACA,UAAI,CAAC,KAAK0C,iBAAN,IAA2B,CAAC,KAAKX,OAAjC,IAA4C,CAAC,KAAKlB,QAAtD,EAAgE;AAC9D,aAAKP,iBAAL,GAAyB,KAAzB;AACA,eAAO,KAAP;AACF;;AACA,UAAI,CAAC,KAAKqC,6BAAN,IAAwC,CAAC,KAAKZ,OAA9C,IAAyD,CAAC,KAAKlB,QAAnE,EAA6E;AAC3E,aAAKN,6BAAL,GAAqC,KAArC;AACA,eAAO,KAAP;AACF;;AACA,UAAI,CAAC,KAAK+B,gBAAV,EAA4B;AAC1B,aAAKrC,gBAAL,GAAwB,KAAxB;AACA,eAAO,KAAP;AACF;;AACA,UAAI,CAAC,KAAKsC,aAAV,EAAyB;AACvB,aAAKrC,aAAL,GAAqB,KAArB;AACA,eAAO,KAAP;AACF;;AACA,UAAI,CAAC,KAAKsC,eAAV,EAA2B;AACzB,aAAKrC,eAAL,GAAuB,KAAvB;AACA,eAAO,KAAP;AACF;;AACA,UAAI,CAAC,KAAKsC,eAAV,EAA2B;AACzB,aAAKrC,eAAL,GAAuB,KAAvB;AACA,eAAO,KAAP;AACF;;AACA,UAAI,KAAK6B,mBAAL,IAA4B,CAAC,KAAKW,eAAlC,IAAqD,CAAC,KAAKb,OAA3D,IAAsE,CAAC,KAAKlB,QAAhF,EAA0F;AACxF,aAAKL,eAAL,GAAuB,KAAvB;AACA,eAAO,KAAP;AACF;;AACA,aAAO,IAAP;AACD,KA9NM;;AA+NP,UAAMgF,aAAN,GAAsB;AACpB,UAAI,CAAC,KAAK9B,YAAL,EAAL,EAAyB;AACvB,aAAKhD,YAAL,GAAoB,KAApB;AACA,eAAO,KAAP;AACF,OAHA,MAIK,IAAI,KAAKuB,mBAAL,IAA4B,KAAK2D,aAAL,EAA5B,IAAoD,CAAC,KAAK7D,OAA1D,IAAqE,CAAC,KAAKlB,QAA/E,EAAyF;AAC5F,aAAKF,aAAL,GAAqB,KAArB;AACA,eAAO,KAAP;AACF,OAHK,MAGE;AACL,aAAKkF,eAAL;AACF;AACD,KA1OM;;AA2OPC,oBAAgB,CAAC3G,KAAD,EAAQ4G,WAAR,EAAqB;AACnC,WAAK1F,cAAL,GAAsB,IAAtB;;AACA,UAAI0F,WAAW,EAAE3C,KAAjB,EAAwB;AACtB,aAAK1C,YAAL,GAAoB,IAApB;AACA,aAAK1B,IAAL,CAAUG,KAAV,GAAkB4G,WAAW,CAACtG,MAA9B;AACF,OAHA,MAGO,IAAIsG,WAAJ,EAAiB;AACtB,aAAK/G,IAAL,CAAUG,KAAV,GAAkB,IAAlB;AACF;AACD,KAnPM;;AAoPPyG,iBAAa,GAAG;AACd,aAAO,KAAK5G,IAAL,CAAUM,MAAV,CAAiB6D,MAAjB,IAA2B,EAAlC;AACD,KAtPM;;AAuPPO,gBAAY,GAAG;AACb,aAAOvB,OAAO,CAAC,KAAKnD,IAAL,CAAUG,KAAX,CAAd;AACD,KAzPM;;AA0PP0G,mBAAe,GAAG;AAChBxH,sBAAgB;AAChB,YAAMsF,MAAK,GAAI,6CAAf;AACA,YAAMC,GAAE,GAAI,qDACR,UADQ,GACKD,MADL,GAER,eAFQ,GAEU,KAAK3E,IAAL,CAAUO,OAAV,CAAkBE,MAF5B,GAGR,UAHQ,GAGK,KAAKT,IAAL,CAAUO,OAAV,CAAkBC,MAHvB,GAIR,QAJQ,GAIG,KAAKR,IAAL,CAAUO,OAAV,CAAkBG,IAJrB,GAKR,WALQ,GAKM,KAAKV,IAAL,CAAUO,OAAV,CAAkBI,OALpC;AAMAkE,WAAK,CAACD,GAAD,CAAL,CACKnC,IADL,CACUC,QAAO,IAAKA,QAAQ,CAACoC,IAAT,EADtB,EAEKrC,IAFL,CAEUjD,IAAG,IAAK;AACZ,cAAMuF,YAAW,GAAIvF,IAAI,CAACwF,QAAL,CAAcC,IAAnC;;AACA,YAAIF,YAAY,CAACZ,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,eAAK1C,cAAL,GAAsB,KAAtB;AACF,SAFA,MAGK;AACH,gBAAMyD,QAAO,GAAIH,YAAY,CAAC,CAAD,CAAZ,CAAgBI,MAAhB,CAAuB,CAAvB,EAA0BC,QAA1B,CAAmCC,eAApD;AACA,gBAAM9E,OAAM,GAAIwE,YAAY,CAAC,CAAD,CAAZ,CAAgBI,MAAhB,CAAuB,CAAvB,EAA0BC,QAA1B,CAAmCE,OAAnD;AACA,eAAKtF,IAAL,CAAUO,OAAV,CAAkBG,IAAlB,GAAyB,KAAK6E,aAAL,CAAmBhF,OAAO,CAACiF,IAA3B,CAAzB;AACA,eAAKxF,IAAL,CAAUO,OAAV,CAAkBI,OAAlB,GAA4B,KAAK4E,aAAL,CAAmBhF,OAAO,CAACkF,cAAR,CAAuB,CAAvB,EAA0BC,KAA7C,CAA5B;AACA,eAAK1F,IAAL,CAAUO,OAAV,CAAkBC,MAAlB,GAA2B,KAAK+E,aAAL,CAAmBhF,OAAO,CAACoF,MAA3B,CAA3B;AACA,eAAK3F,IAAL,CAAUO,OAAV,CAAkBM,SAAlB,GAA8BqE,QAAQ,CAACU,SAAvC;AACA,eAAK5F,IAAL,CAAUO,OAAV,CAAkBK,QAAlB,GAA6BsE,QAAQ,CAACW,QAAtC;AACA,eAAKpE,cAAL,GAAsB,IAAtB;AACA,eAAKgF,WAAL;AACF;AACD,OAlBL,EAmBK9D,KAnBL,CAmBW,MAAM;AACX,aAAKlB,cAAL,GAAsB,KAAtB;AACD,OArBL;AAsBD,KAzRM;;AA0RP8D,iBAAa,CAACyB,IAAD,EAAO;AAClB,UAAIC,OAAM,GAAI;AAAC,aAAI,GAAL;AAAU,aAAI,GAAd;AAAmB,aAAI,GAAvB;AAA4B,aAAI,GAAhC;AAAqC,aAAI,GAAzC;AAA8C,aAAI,GAAlD;AAAuD,aAAI,GAA3D;AAAgE,aAAI,GAApE;AAAyE,aAAI,GAA7E;AAAkF,aAAI,GAAtF;AAA2F,aAAI,IAA/F;AAAqG,aAAI,GAAzG;AAA8G,aAAI,GAAlH;AAAuH,aAAI,IAA3H;AAAiI,aAAI,GAArI;AACZ,aAAI,GADQ;AACH,aAAI,GADD;AACM,aAAI,GADV;AACe,aAAI,GADnB;AACwB,aAAI,GAD5B;AACiC,aAAI,GADrC;AAC0C,aAAI,GAD9C;AACmD,aAAI,GADvD;AAC4D,aAAI,IADhE;AACsE,aAAI,GAD1E;AAC+E,aAAI,GADnF;AACwF,aAAI,GAD5F;AACiG,aAAI,GADrG;AAC0G,aAAI,GAD9G;AACmH,aAAI,GADvH;AAC4H,aAAI,GADhI;AACqI,aAAI,GADzI;AAC8I,aAAI,GADlJ;AACuJ,aAAI,GAD3J;AACgK,aAAI,GADpK;AACyK,aAAI,IAD7K;AACmL,aAAI,GADvL;AAC4L,aAAI,GADhM;AACqM,aAAI,IADzM;AAC+M,aAAI,GADnN;AAEZ,aAAI,GAFQ;AAEH,aAAI,GAFD;AAEM,aAAI,GAFV;AAEe,aAAI,GAFnB;AAEwB,aAAI,GAF5B;AAEiC,aAAI,GAFrC;AAE0C,aAAI,GAF9C;AAEmD,aAAI,GAFvD;AAE4D,aAAI,GAFhE;AAEqE,aAAI,IAFzE;AAE+E,aAAI;AAFnF,OAAd;AAGA,aAAOD,IAAI,CAACE,KAAL,CAAW,EAAX,EAAeC,GAAf,CAAmB,UAAUC,IAAV,EAAgB;AACxC,eAAOH,OAAO,CAACG,IAAD,CAAP,IAAiBA,IAAxB;AACD,OAFM,EAEJC,IAFI,CAEC,EAFD,CAAP;AAGF;;AAjSO;AA5II,CAAf","names":["VueTelInput","store","axios","toggleProcessing","name","components","data","rules","message","regex","options","checkPassword","onlyCountries","phoneInput","user","userType","surname","phone","email","password","reason","address","street","number","city","country","latitude","longitude","nameIsEntered","surnameIsEntered","emailIsEntered","countryIsEntered","cityIsEntered","streetIsEntered","numberIsEntered","phoneIsEntered","passwordISEntered","confirmationPasswordIsEntered","reasonIsEntered","addressIsValid","phoneIsValid","reasonIsValid","emailIsUnique","isUpdate","mounted","$route","params","id","undefined","get","headers","Authorization","$store","getters","access_token","then","response","catch","computed","accessToken","state","isAdmin","isSuperAdmin","isRentalObjectOwner","isNameEntered","Boolean","isSurnameEntered","isEmailEntered","isCountryEntered","isCityEntered","isStreetEntered","isNumberEntered","isPasswordEntered","isConfirmationPasswordEntered","isReasonEntered","notSamePasswords","passwordValidation","errors","condition","test","push","length","valid","emailValidation","emailRule","methods","update","isDataEntered","isPhoneValid","apiKey","url","fetch","json","responseView","Response","View","location","Result","Location","DisplayPosition","Address","transliterate","City","AdditionalData","value","Street","Longitude","Latitude","put","$notify","title","text","position","type","error","status","emailChanged","submit","isDataCorrect","makeRequest","post","$router","isReasonValid","validateAddress","onTelephoneInput","phoneObject","word","letters","split","map","char","join"],"sourceRoot":"","sources":["C:\\Users\\Saška\\Downloads\\ISA_MRS\\isa_mrs_projekat_front\\src\\components\\UnregisteredUser\\components\\RegistrationPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"row\">\r\n    <div class=\"col-2\"></div>\r\n    <div class=\"col-8 pt-5 mb-5\">\r\n      <div class=\"container px-4 py-3 rounded form\" spellcheck=\"false\" >\r\n        <div class=\"container-fluid\">\r\n          <h3 v-if=\"isAdmin\">New User</h3>\r\n          <h3 v-else-if=\"isUpdate\">Profile Update</h3>\r\n          <h3 v-else>Sign Up</h3>\r\n          <div class=\"row main justify-content-center\">\r\n            <div class=\"row main\">\r\n              <div class=\"col main\">\r\n                <div class=\"row\">\r\n                  <div class=\"col-4\"></div>\r\n                  <div class=\"col-6\">\r\n                    <div v-if=\"!isUpdate\" class=\"row\">\r\n                      <label for=\"userType\">User type</label>\r\n                      <select class=\"form-control\" v-model=\"user.userType\" id=\"userType\">\r\n                        <option value=\"Client\" selected=\"selected\">Client</option>\r\n                        <option value=\"VacationRentalOwner\">House Owner</option>\r\n                        <option value=\"BoatOwner\">Boat Owner</option>\r\n                        <option value=\"Instructor\">Fishing Instructor</option>\r\n                        <option v-if=\"isAdmin\" value=\"Admin\">Admin</option>\r\n                      </select>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <label for=\"name\">Name</label>\r\n                      <input class=\"form-control\" type=\"text\" id=\"name\" v-model=\"user.name\" placeholder=\"E.g. John\" @input=\"nameIsEntered=true\">\r\n                      <p v-if='!nameIsEntered'>'Name' is a mandatory field.</p>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <label for=\"surname\">Surname</label>\r\n                      <input class=\"form-control\" type=\"text\" id=\"surname\" v-model=\"user.surname\" placeholder=\"E.g. Doe\" @input=\"surnameIsEntered=true\">\r\n                      <p v-if='!surnameIsEntered'>'Surname' is a mandatory field.</p>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <label for=\"email\">Email</label>\r\n                      <input class=\"form-control\" :disabled=\"isUpdate\" type=\"email\" id=\"email\" v-model=\"user.email\" placeholder=\"E.g. john@email.com\" @input=\"emailChanged\">\r\n                      <p v-if='!emailIsEntered'>'Email' is a mandatory field.</p>\r\n                      <p v-else-if='!emailValidation'>Invalid email format.</p>\r\n                      <p v-else-if='!emailIsUnique'>Email is already taken.</p>\r\n                    </div>\r\n                    <div v-if=\"!isAdmin&&!isUpdate\" class=\"row\">\r\n                      <label for=\"inputPassword2\">Password</label>\r\n                      <input type=\"password\" id=\"inputPassword2\" v-model=\"user.password\" class=\"form-control col-sm-auto col-lg-4\" aria-describedby=\"passwordHelpBlock\" placeholder=\"New password\" @input=\"passwordISEntered=true\">\r\n                      <p v-if=\"!passwordISEntered\">'Password' is a mandatory field.</p>\r\n                      <p v-else-if='!passwordValidation.valid'>{{ passwordValidation.errors[0] }}</p>\r\n                      <small id=\"passwordHelpBlock\" class=\"form-text text-muted\">\r\n                        Your password must be 8-20 characters long, contain letters and numbers, and must not contain spaces, special characters, or emoji.\r\n                      </small>\r\n                    </div>\r\n                    <div v-if=\"!isAdmin&&!isUpdate\" class=\"row\">\r\n                      <label for=\"inputPassword3\">Confirm Password</label>\r\n                      <input type=\"password\" id=\"inputPassword3\" v-model.lazy=\"checkPassword\" class=\"form-control col-sm-auto col-lg-4\" aria-describedby=\"passwordHelpBlock\" placeholder=\"Confirm password\" @input=\"confirmationPasswordIsEntered=true\">\r\n                      <p v-if=\"!confirmationPasswordIsEntered\">'Confirmation Password' is a mandatory field.</p>\r\n                      <p  v-else-if='notSamePasswords'>Passwords don't match.</p>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-2\"></div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col main\">\r\n                <div class=\"row\">\r\n                  <div class=\"col-2\"></div>\r\n                  <div class=\"col-6\">\r\n                    <div class=\"row\">\r\n                      <label for=\"country\">Country</label>\r\n                      <input v-model=\"user.address.country\" class=\"form-control\" type=\"text\" id=\"country\" placeholder=\"Country\" @input=\"countryIsEntered=true\">\r\n                      <p v-if='!countryIsEntered'>'Country' is a mandatory field.</p>\r\n                      <p v-if='!addressIsValid'>Invalid address data.</p>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <label for=\"city\">City</label>\r\n                      <input v-model=\"user.address.city\" class=\"form-control\" type=\"text\" id=\"city\" placeholder=\"City\" @input=\"cityIsEntered=true\">\r\n                      <p v-if='!cityIsEntered'>'City' is a mandatory field.</p>\r\n                      <p v-if='!addressIsValid'>Invalid address data.</p>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <label for=\"street\">Street</label>\r\n                      <input v-model=\"user.address.street\" class=\"form-control\" type=\"text\" id=\"street\" placeholder=\"Street\" @input=\"streetIsEntered=true\">\r\n                      <p v-if='!streetIsEntered'>'Street' is a mandatory field.</p>\r\n                      <p v-if='!addressIsValid'>Invalid address data.</p>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <label for=\"number\">Number</label>\r\n                      <input v-model=\"user.address.number\" class=\"form-control\"  type=\"text\" id=\"number\" placeholder=\"House Number\" @input=\"numberIsEntered=true\">\r\n                      <p v-if='!numberIsEntered'>'Number' is a mandatory field.</p>\r\n                      <p v-if='!addressIsValid'>Invalid address data.</p>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <label for=\"phone\">Phone</label>\r\n                      <vue-tel-input v-model=\"phoneInput\" :placeholder=\"this.user.phone\" id=\"phone\" mode=\"international\" defaultCountry=\"RS\" :onlyCountries=onlyCountries @input=\"onTelephoneInput\"></vue-tel-input>\r\n                      <p v-if='!phoneIsValid'>Invalid phone number.</p>\r\n                    </div>\r\n                    <div class=\"row\" v-if=\"isRentalObjectOwner && !isAdmin && !isUpdate\">\r\n                      <label for=\"motivationLetter\">Motivation Letter</label>\r\n                      <textarea v-model=\"user.reason\" class=\"form-control\" rows=\"10\" maxlength=\"300\" placeholder=\"Please describe why you want to join our community in 50-500 characters.\" id=\"motivationLetter\" @input=\"reasonIsEntered=true\"></textarea>\r\n                      <p v-if='!reasonIsEntered'>'Motivation Letter' is a mandatory field.</p>\r\n                      <p v-if='!reasonIsValid'>Minimum characters is 50.</p>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-4\">\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"d-flex pt-3 justify-content-center\">\r\n            <router-link v-if=\"isAdmin\" to=\"/admin/users\" class=\"btn btn-red mt-3 me-1\">Cancel</router-link>\r\n            <button type=\"button\" class=\"btn mt-3\" @click=\"submit\">Submit</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-2\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { VueTelInput }  from 'vue3-tel-input';\r\nimport 'vue3-tel-input/dist/vue3-tel-input.css';\r\nimport store from \"@/store\";\r\nimport axios from \"axios\";\r\nimport {toggleProcessing} from \"@/components/state\";\r\n\r\nexport default {\r\n  name: \"RegistrationPage\",\r\n  components: {VueTelInput},\r\n  data() {\r\n    return {\r\n      rules: [\r\n        { message:'One lowercase letter required.', regex:/[a-z]+/ },\r\n        { message:\"One uppercase letter required.\",  regex:/[A-Z]+/ },\r\n        { message:\"8-20 characters required.\", regex:/.{8,20}/ },\r\n        { message:\"One number required.\", regex:/[0-9]+/ }\r\n      ],\r\n      options: null,\r\n      checkPassword:'',\r\n      onlyCountries: ['RS', 'BA', 'HR', 'ME', 'SI', 'MK'],\r\n      phoneInput: null,\r\n      user: {\r\n        userType: \"Client\",\r\n        name: null,\r\n        surname: null,\r\n        phone: null,\r\n        email: null,\r\n        password: '',\r\n        reason: null,\r\n        address: {\r\n          street: null,\r\n          number: null,\r\n          city: null,\r\n          country: null,\r\n          latitude: null,\r\n          longitude: null\r\n        }\r\n      },\r\n      nameIsEntered: true,\r\n      surnameIsEntered: true,\r\n      emailIsEntered: true,\r\n      countryIsEntered: true,\r\n      cityIsEntered: true,\r\n      streetIsEntered: true,\r\n      numberIsEntered: true,\r\n      phoneIsEntered: true,\r\n      passwordISEntered: true,\r\n      confirmationPasswordIsEntered: true,\r\n      reasonIsEntered: true,\r\n      addressIsValid: true,\r\n      phoneIsValid: true,\r\n      reasonIsValid: true,\r\n      emailIsUnique: true,\r\n      isUpdate: false,\r\n    }\r\n  },\r\n  mounted() {\r\n    this.isUpdate = this.$route.params.id !== undefined;\r\n    if (this.isUpdate) {\r\n      axios.get(\"/Users/getUser\", {\r\n        headers: {\r\n          Authorization: \"Bearer \" + this.$store.getters.access_token\r\n        }\r\n      })\r\n      .then((response) => {\r\n        this.user = response.data;\r\n        this.phoneInput = this.user.phone;\r\n      })\r\n      .catch(() => {\r\n\r\n      });\r\n    }\r\n  },\r\n  computed: {\r\n    accessToken() {\r\n      return store.state.access_token;\r\n    },\r\n    isAdmin() {\r\n      return store.state.isSuperAdmin;\r\n    },\r\n    isRentalObjectOwner() {\r\n      return (this.user.userType !== \"Client\" && this.user.userType !== \"Admin\" && this.user.userType !== \"SuperAdmin\");\r\n    },\r\n    isNameEntered() {\r\n      return Boolean(this.user.name);\r\n    },\r\n    isSurnameEntered() {\r\n      return Boolean(this.user.surname);\r\n    },\r\n    isEmailEntered() {\r\n      return Boolean(this.user.email);\r\n    },\r\n    isCountryEntered() {\r\n      return Boolean(this.user.address.country);\r\n    },\r\n    isCityEntered() {\r\n      return Boolean(this.user.address.city);\r\n    },\r\n    isStreetEntered() {\r\n      return Boolean(this.user.address.street);\r\n    },\r\n    isNumberEntered() {\r\n      return Boolean(this.user.address.number);\r\n    },\r\n    isPasswordEntered() {\r\n      return Boolean(this.user.password);\r\n    },\r\n    isConfirmationPasswordEntered() {\r\n      return Boolean(this.checkPassword);\r\n    },\r\n    isReasonEntered() {\r\n      return Boolean(this.user.reason);\r\n    },\r\n    notSamePasswords () {\r\n      if (this.isPasswordEntered && this.isConfirmationPasswordEntered) {\r\n        return (this.user.password !== this.checkPassword)\r\n      } else {\r\n        return false\r\n      }\r\n    },\r\n    passwordValidation () {\r\n      let errors = []\r\n      if (this.user.password !== ''){\r\n        for (let condition of this.rules) {\r\n          if (!condition.regex.test(this.user.password)) {\r\n            errors.push(condition.message)\r\n          }\r\n        }\r\n        if (errors.length === 0) {\r\n          return { valid:true, errors }\r\n        } else {\r\n          return { valid:false, errors }\r\n        }\r\n      }\r\n      else {\r\n        return { valid:true, errors }\r\n      }\r\n    },\r\n    emailValidation() {\r\n      if (this.isEmailEntered) {\r\n        let emailRule = {regex:/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}/};\r\n        return emailRule.regex.test(this.user.email);\r\n      }\r\n      return true;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      toggleProcessing();\r\n      if (this.isDataEntered()) {\r\n        if (!this.isPhoneValid()){\r\n          this.phoneIsValid = false;\r\n          return false;\r\n        } else {\r\n          const apiKey = 'VrDrl5BjEA0Whvb-chHbFz96HV4qlCXB-yoiTRRLKno';\r\n          const url = 'https://geocoder.ls.hereapi.com/6.2/geocode.json' +\r\n              '?apiKey=' + apiKey +\r\n              '&housenumber=' + this.user.address.number +\r\n              '&street=' + this.user.address.street +\r\n              '&city=' + this.user.address.city +\r\n              '&country=' + this.user.address.country;\r\n          fetch(url)\r\n              .then(response => response.json())\r\n              .then(data => {\r\n                const responseView = data.Response.View;\r\n                if (responseView.length === 0) {\r\n                  this.addressIsValid = false;\r\n                }\r\n                else {\r\n                  const location = responseView[0].Result[0].Location.DisplayPosition;\r\n                  const address = responseView[0].Result[0].Location.Address;\r\n                  this.user.address.city = this.transliterate(address.City);\r\n                  this.user.address.country = this.transliterate(address.AdditionalData[0].value);\r\n                  this.user.address.street = this.transliterate(address.Street);\r\n                  this.user.address.longitude = location.Longitude;\r\n                  this.user.address.latitude = location.Latitude;\r\n                  this.addressIsValid = true;\r\n                  axios.put(\"/Users/updateUser\", this.user, {\r\n                    headers: {\r\n                      Authorization: \"Bearer \" + this.accessToken,\r\n                    }\r\n                  })\r\n                  .then(() => {\r\n                    this.$notify({\r\n                      title: \"Successful update\",\r\n                      text: \"You have successfully updated your profile.\",\r\n                      position: \"bottom right\",\r\n                      type: \"success\"\r\n                    });\r\n                    toggleProcessing();\r\n                  })\r\n                  .catch(error => {\r\n                    if (!error.response) {\r\n                      this.$notify({\r\n                        title: \"Server error\",\r\n                        text: \"Server is currently off. Please try again later...\",\r\n                        type: \"error\"\r\n                      });\r\n                      toggleProcessing();\r\n                    } else if (error.response.status === 500) {\r\n                      this.$notify({\r\n                        title: \"Internal Server Error\",\r\n                        text: \"Something went wrong on the server! Please try again later...\",\r\n                        position: \"bottom right\",\r\n                        type: \"error\"\r\n                      });\r\n                      toggleProcessing();\r\n                    }\r\n                  })\r\n                }\r\n              })\r\n              .catch(() => {\r\n                this.addressIsValid = false;\r\n              });\r\n        }\r\n      }\r\n    },\r\n    emailChanged() {\r\n      this.emailIsEntered = true;\r\n      this.emailIsUnique = true;\r\n    },\r\n    submit() {\r\n      if (this.isUpdate) {\r\n        this.update();\r\n      }\r\n      else {\r\n        if (this.passwordValidation.valid && !this.notSamePasswords) {\r\n          if (this.isDataEntered()) {\r\n            this.isDataCorrect();\r\n          }\r\n        }\r\n      }\r\n    },\r\n    makeRequest() {\r\n      if (this.isAdmin) {\r\n        axios.post(\"/Users/addUser\", this.user, {\r\n          headers: {\r\n            Authorization: \"Bearer \" + this.accessToken,\r\n          }\r\n        })\r\n        .then(() => {\r\n          this.$notify( {\r\n            title: \"Successful adding\",\r\n            text: \"You have successfully added a new user. Verification email has been sent to \" + this.user.email + \".\",\r\n            position: \"bottom right\",\r\n            type: \"success\"\r\n          });\r\n          toggleProcessing();\r\n          this.$router.push(\"/admin/users\");\r\n        })\r\n        .catch(error => {\r\n          if (!error.response) {\r\n            this.$notify({\r\n              title: \"Server error\",\r\n              text: \"Server is currently off. Please try again later...\",\r\n              type: \"error\"\r\n            });\r\n            toggleProcessing();\r\n          } else if (error.response.status === 422) {\r\n            toggleProcessing();\r\n            this.emailIsUnique = false;\r\n          } else if (error.response.status === 500) {\r\n            this.$notify({\r\n              title: \"Internal Server Error\",\r\n              text: \"Something went wrong on the server! Please try again later...\",\r\n              position: \"bottom right\",\r\n              type: \"error\"\r\n            });\r\n            toggleProcessing();\r\n          }\r\n        })\r\n      }\r\n      else if (this.accessToken !== null) {\r\n        this.isUpdate = true;\r\n      }\r\n      else {\r\n        axios.post(\"/Requests/signUp\", this.user, {\r\n          headers: {\r\n            Authorization: \"Bearer \" + this.accessToken,\r\n          }\r\n        })\r\n        .then(() => {\r\n          let message = \"Successful Sign Up\";\r\n          if(this.user.userType === \"Client\") message += \"Verification email has been sent to \" + this.user.email + \". Please go and check your mail.\";\r\n          else message += \"Your request is pending. Keep checking your email for a response.\"\r\n          this.$notify( {\r\n            title: \"Sign up\",\r\n            text: message,\r\n            position: \"bottom right\",\r\n            type: \"success\"\r\n          });\r\n          toggleProcessing();\r\n          this.$router.push(\"/\");\r\n        })\r\n        .catch(error => {\r\n          if (!error.response) {\r\n            this.$notify({\r\n              title: \"Server error\",\r\n              text: \"Server is currently off. Please try again later...\",\r\n              type: \"error\"\r\n            });\r\n            toggleProcessing();\r\n          } else if (error.response.status === 422) {\r\n            toggleProcessing();\r\n            this.emailIsUnique = false;\r\n          } else if (error.response.status === 400) {\r\n            this.$notify({\r\n              title: \"Invalid Request Status\",\r\n              text: \"Bad registration request.\",\r\n              position: \"bottom right\",\r\n              type: \"warn\"\r\n            });\r\n            toggleProcessing();\r\n          } else if (error.response.status === 500) {\r\n            this.$notify({\r\n              title: \"Internal Server Error\",\r\n              text: \"Something went wrong on the server! Please try again later...\",\r\n              position: \"bottom right\",\r\n              type: \"error\"\r\n            });\r\n            toggleProcessing();\r\n          }\r\n        })\r\n      }\r\n\r\n    },\r\n    isDataEntered() {\r\n      if (!this.isNameEntered) {\r\n        this.nameIsEntered = false;\r\n        return false;\r\n      }\r\n      if (!this.isSurnameEntered) {\r\n        this.surnameIsEntered = false;\r\n        return false;\r\n      }\r\n      if (!this.isEmailEntered) {\r\n        this.emailIsEntered = false;\r\n        return false;\r\n      }\r\n      if (!this.isPasswordEntered && !this.isAdmin && !this.isUpdate) {\r\n        this.passwordISEntered = false;\r\n        return false;\r\n      }\r\n      if (!this.isConfirmationPasswordEntered  && !this.isAdmin && !this.isUpdate) {\r\n        this.confirmationPasswordIsEntered = false;\r\n        return false;\r\n      }\r\n      if (!this.isCountryEntered) {\r\n        this.countryIsEntered = false;\r\n        return false;\r\n      }\r\n      if (!this.isCityEntered) {\r\n        this.cityIsEntered = false;\r\n        return false;\r\n      }\r\n      if (!this.isStreetEntered) {\r\n        this.streetIsEntered = false;\r\n        return false;\r\n      }\r\n      if (!this.isNumberEntered) {\r\n        this.numberIsEntered = false;\r\n        return false;\r\n      }\r\n      if (this.isRentalObjectOwner && !this.isReasonEntered && !this.isAdmin && !this.isUpdate) {\r\n        this.reasonIsEntered = false;\r\n        return false;\r\n      }\r\n      return true;\r\n    },\r\n    async isDataCorrect() {\r\n      if (!this.isPhoneValid()){\r\n        this.phoneIsValid = false;\r\n        return false;\r\n      }\r\n      else if (this.isRentalObjectOwner && this.isReasonValid() && !this.isAdmin && !this.isUpdate) {\r\n        this.reasonIsValid = false;\r\n        return false;\r\n      } else {\r\n        this.validateAddress();\r\n      }\r\n    },\r\n    onTelephoneInput(phone, phoneObject) {\r\n      this.phoneIsEntered = true;\r\n      if (phoneObject?.valid) {\r\n        this.phoneIsValid = true;\r\n        this.user.phone = phoneObject.number;\r\n      } else if (phoneObject) {\r\n        this.user.phone = null;\r\n      }\r\n    },\r\n    isReasonValid() {\r\n      return this.user.reason.length >= 50;\r\n    },\r\n    isPhoneValid() {\r\n      return Boolean(this.user.phone);\r\n    },\r\n    validateAddress() {\r\n      toggleProcessing();\r\n      const apiKey = 'VrDrl5BjEA0Whvb-chHbFz96HV4qlCXB-yoiTRRLKno';\r\n      const url = 'https://geocoder.ls.hereapi.com/6.2/geocode.json' +\r\n          '?apiKey=' + apiKey +\r\n          '&housenumber=' + this.user.address.number +\r\n          '&street=' + this.user.address.street +\r\n          '&city=' + this.user.address.city +\r\n          '&country=' + this.user.address.country;\r\n      fetch(url)\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            const responseView = data.Response.View;\r\n            if (responseView.length === 0) {\r\n              this.addressIsValid = false;\r\n            }\r\n            else {\r\n              const location = responseView[0].Result[0].Location.DisplayPosition;\r\n              const address = responseView[0].Result[0].Location.Address;\r\n              this.user.address.city = this.transliterate(address.City);\r\n              this.user.address.country = this.transliterate(address.AdditionalData[0].value);\r\n              this.user.address.street = this.transliterate(address.Street);\r\n              this.user.address.longitude = location.Longitude;\r\n              this.user.address.latitude = location.Latitude;\r\n              this.addressIsValid = true;\r\n              this.makeRequest();\r\n            }\r\n          })\r\n          .catch(() => {\r\n            this.addressIsValid = false;\r\n          });\r\n    },\r\n    transliterate(word) {\r\n      let letters = {\"Б\":\"B\", \"В\":\"V\", \"Г\":\"G\", \"Д\":\"D\", \"Ђ\":\"Đ\", \"Ж\":\"Ž\", \"З\":\"Z\", \"И\":\"I\", \"К\":\"K\", \"Л\":\"L\", \"Љ\":\"Lj\", \"М\":\"M\", \"Н\":\"N\", \"Њ\":\"Nj\", \"П\":\"P\",\r\n        \"Р\":\"R\", \"С\":\"S\", \"Ћ\":\"Ć\", \"У\":\"U\", \"Ф\":\"F\", \"Х\":\"H\", \"Ц\":\"C\", \"Ч\":\"Č\", \"Џ\":\"Dž\", \"Ш\":\"Š\", \"б\":\"b\", \"в\":\"v\", \"г\":\"g\", \"д\":\"d\", \"ђ\":\"đ\", \"ж\":\"ž\", \"з\":\"z\", \"и\":\"i\", \"к\":\"k\", \"л\":\"l\", \"љ\":\"lj\", \"м\":\"m\", \"н\":\"n\", \"њ\":\"nj\", \"п\":\"p\",\r\n        \"р\":\"r\", \"с\":\"s\", \"т\":\"t\", \"ћ\":\"ć\", \"у\":\"u\", \"ф\":\"f\", \"х\":\"h\", \"ц\":\"c\", \"ч\":\"č\", \"џ\":\"dž\", \"ш\":\"š\"};\r\n      return word.split('').map(function (char) {\r\n        return letters[char] || char;\r\n      }).join(\"\");\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n  textarea {\r\n    resize: none;\r\n    width: 100%;\r\n    text-align: justify;\r\n  }\r\n\r\n  input[type='text'], input[type='email'] {\r\n    width: 100%;\r\n  }\r\n\r\n  input::placeholder {\r\n    color: grey;\r\n  }\r\n\r\n  h3 {\r\n    text-align: center;\r\n  }\r\n\r\n  p {\r\n    color: #e23c52;\r\n  }\r\n</style>"]},"metadata":{},"sourceType":"module"}