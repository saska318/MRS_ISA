{"ast":null,"code":"import { VueTelInput } from 'vue3-tel-input';\nimport 'vue3-tel-input/dist/vue3-tel-input.css';\nimport axios from \"axios\";\nimport { toggleProcessing } from \"@/components/state\";\nexport default {\n  name: \"EditPersonalData\",\n  components: {\n    VueTelInput\n  },\n\n  data() {\n    return {\n      onlyCountries: ['RS', 'BA', 'HR', 'ME', 'SI', 'MK'],\n      phoneInput: null,\n      user: {\n        name: null,\n        surname: null,\n        phone: null,\n        email: null,\n        address: {\n          street: null,\n          number: null,\n          city: null,\n          country: null,\n          latitude: null,\n          longitude: null\n        }\n      },\n      nameIsEntered: true,\n      surnameIsEntered: true,\n      emailIsEntered: true,\n      countryIsEntered: true,\n      cityIsEntered: true,\n      streetIsEntered: true,\n      numberIsEntered: true,\n      phoneIsEntered: true,\n      addressIsValid: true,\n      phoneIsValid: true\n    };\n  },\n\n  computed: {\n    isNameEntered() {\n      return Boolean(this.user.name);\n    },\n\n    isSurnameEntered() {\n      return Boolean(this.user.surname);\n    },\n\n    isEmailEntered() {\n      return Boolean(this.user.email);\n    },\n\n    isCountryEntered() {\n      return Boolean(this.user.address.country);\n    },\n\n    isCityEntered() {\n      return Boolean(this.user.address.city);\n    },\n\n    isStreetEntered() {\n      return Boolean(this.user.address.street);\n    },\n\n    isNumberEntered() {\n      return Boolean(this.user.address.number);\n    },\n\n    isVacationRentalOwner() {\n      return this.$store.getters.user === \"vacationRentalOwner\";\n    },\n\n    isBoatOwner() {\n      return this.$store.getters.user === \"boatOwner\";\n    }\n\n  },\n  methods: {\n    submit() {\n      if (this.isDataEntered()) {\n        this.isDataCorrect();\n      }\n    },\n\n    editData() {\n      axios.put(\"/Users/editUser\", this.user, {\n        headers: {\n          Authorization: \"Bearer \" + this.$store.getters.access_token\n        }\n      }).then(() => {\n        this.$notify({\n          title: \"Successful edit\",\n          text: \"You have successfully edited your personal data.\",\n          position: \"bottom right\",\n          type: \"success\"\n        });\n        toggleProcessing();\n        this.$router.push(\"/\");\n      }).catch(error => {\n        if (!error.response) {\n          this.$notify({\n            title: \"Server error\",\n            text: \"Server is currently off. Please try again later...\",\n            type: \"error\"\n          });\n          toggleProcessing();\n        } else if (error.response.status === 500) {\n          this.$notify({\n            title: \"Internal Server Error\",\n            text: \"Something went wrong on the server! Please try again later...\",\n            position: \"bottom right\",\n            type: \"error\"\n          });\n          toggleProcessing();\n        }\n      });\n    },\n\n    isDataEntered() {\n      if (!this.isNameEntered) {\n        this.nameIsEntered = false;\n        return false;\n      }\n\n      if (!this.isSurnameEntered) {\n        this.surnameIsEntered = false;\n        return false;\n      }\n\n      if (!this.isEmailEntered) {\n        this.emailIsEntered = false;\n        return false;\n      }\n\n      if (!this.isCountryEntered) {\n        this.countryIsEntered = false;\n        return false;\n      }\n\n      if (!this.isCityEntered) {\n        this.cityIsEntered = false;\n        return false;\n      }\n\n      if (!this.isStreetEntered) {\n        this.streetIsEntered = false;\n        return false;\n      }\n\n      if (!this.isNumberEntered) {\n        this.numberIsEntered = false;\n        return false;\n      }\n\n      return true;\n    },\n\n    async isDataCorrect() {\n      if (!this.isPhoneValid()) {\n        this.phoneIsValid = false;\n        return false;\n      } else {\n        this.validateAddress();\n      }\n    },\n\n    onTelephoneInput(phone, phoneObject) {\n      this.phoneIsEntered = true;\n\n      if (phoneObject?.valid) {\n        this.phoneIsValid = true;\n        this.user.phone = phoneObject.number;\n      } else if (phoneObject) {\n        this.user.phone = null;\n      }\n    },\n\n    isPhoneValid() {\n      return Boolean(this.user.phone);\n    },\n\n    validateAddress() {\n      toggleProcessing();\n      const apiKey = 'VrDrl5BjEA0Whvb-chHbFz96HV4qlCXB-yoiTRRLKno';\n      const url = 'https://geocoder.ls.hereapi.com/6.2/geocode.json' + '?apiKey=' + apiKey + '&housenumber=' + this.user.address.number + '&street=' + this.user.address.street + '&city=' + this.user.address.city + '&country=' + this.user.address.country;\n      fetch(url).then(response => response.json()).then(data => {\n        const responseView = data.Response.View;\n\n        if (responseView.length === 0) {\n          this.addressIsValid = false;\n        } else {\n          const location = responseView[0].Result[0].Location.DisplayPosition;\n          const address = responseView[0].Result[0].Location.Address;\n          this.user.address.city = this.transliterate(address.City);\n          this.user.address.country = this.transliterate(address.AdditionalData[0].value);\n          this.user.address.street = this.transliterate(address.Street);\n          this.user.address.longitude = location.Longitude;\n          this.user.address.latitude = location.Latitude;\n          this.addressIsValid = true;\n          this.editData();\n        }\n      }).catch(() => {\n        this.addressIsValid = false;\n      });\n    },\n\n    transliterate(word) {\n      let letters = {\n        \"Б\": \"B\",\n        \"В\": \"V\",\n        \"Г\": \"G\",\n        \"Д\": \"D\",\n        \"Ђ\": \"Đ\",\n        \"Ж\": \"Ž\",\n        \"З\": \"Z\",\n        \"И\": \"I\",\n        \"К\": \"K\",\n        \"Л\": \"L\",\n        \"Љ\": \"Lj\",\n        \"М\": \"M\",\n        \"Н\": \"N\",\n        \"Њ\": \"Nj\",\n        \"П\": \"P\",\n        \"Р\": \"R\",\n        \"С\": \"S\",\n        \"Ћ\": \"Ć\",\n        \"У\": \"U\",\n        \"Ф\": \"F\",\n        \"Х\": \"H\",\n        \"Ц\": \"C\",\n        \"Ч\": \"Č\",\n        \"Џ\": \"Dž\",\n        \"Ш\": \"Š\",\n        \"б\": \"b\",\n        \"в\": \"v\",\n        \"г\": \"g\",\n        \"д\": \"d\",\n        \"ђ\": \"đ\",\n        \"ж\": \"ž\",\n        \"з\": \"z\",\n        \"и\": \"i\",\n        \"к\": \"k\",\n        \"л\": \"l\",\n        \"љ\": \"lj\",\n        \"м\": \"m\",\n        \"н\": \"n\",\n        \"њ\": \"nj\",\n        \"п\": \"p\",\n        \"р\": \"r\",\n        \"с\": \"s\",\n        \"т\": \"t\",\n        \"ћ\": \"ć\",\n        \"у\": \"u\",\n        \"ф\": \"f\",\n        \"х\": \"h\",\n        \"ц\": \"c\",\n        \"ч\": \"č\",\n        \"џ\": \"dž\",\n        \"ш\": \"š\"\n      };\n      return word.split('').map(function (char) {\n        return letters[char] || char;\n      }).join(\"\");\n    }\n\n  },\n\n  mounted() {\n    toggleProcessing();\n    axios.get(\"/Users/getUser\", {\n      headers: {\n        Authorization: \"Bearer \" + this.$store.getters.access_token\n      }\n    }).then(response => {\n      this.user = response.data;\n      toggleProcessing();\n    }).catch(() => {\n      this.$notify({\n        title: \"Server error\",\n        text: \"Server is currently off. Please try again later...\",\n        type: \"error\"\n      });\n      toggleProcessing();\n    });\n  }\n\n};","map":{"version":3,"mappings":"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","names":["VueTelInput","axios","toggleProcessing","name","components","data","onlyCountries","phoneInput","user","surname","phone","email","address","street","number","city","country","latitude","longitude","nameIsEntered","surnameIsEntered","emailIsEntered","countryIsEntered","cityIsEntered","streetIsEntered","numberIsEntered","phoneIsEntered","addressIsValid","phoneIsValid","computed","isNameEntered","Boolean","isSurnameEntered","isEmailEntered","isCountryEntered","isCityEntered","isStreetEntered","isNumberEntered","isVacationRentalOwner","$store","getters","isBoatOwner","methods","submit","isDataEntered","isDataCorrect","editData","put","headers","Authorization","access_token","then","$notify","title","text","position","type","$router","push","catch","error","response","status","isPhoneValid","validateAddress","onTelephoneInput","phoneObject","valid","apiKey","url","fetch","json","responseView","Response","View","length","location","Result","Location","DisplayPosition","Address","transliterate","City","AdditionalData","value","Street","Longitude","Latitude","word","letters","split","map","char","join","mounted","get"],"sourceRoot":"","sources":["C:\\Users\\Saška\\Downloads\\MRS_ISA\\isa_mrs_projekat_front\\src\\components\\VacationRentalOwner\\VacationRentalOwnerPage\\components\\EditPersonalData.vue"],"sourcesContent":["<template>\r\n  <div class=\"row\" v-if=\"this.user\">\r\n    <div class=\"col-2\"></div>\r\n    <div class=\"col-8 pt-5 mb-5\">\r\n      <div class=\"container px-4 py-3 rounded form\" spellcheck=\"false\" >\r\n        <div class=\"container-fluid\">\r\n          <h3>Edit personal data</h3>\r\n          <div class=\"row main justify-content-center\" style=\"margin-top: 5%; margin-bottom: 3%\">\r\n            <div class=\"row main\">\r\n              <div class=\"col main\">\r\n                <div class=\"row\">\r\n                  <div class=\"col-4\"></div>\r\n                  <div class=\"col-6\">\r\n                    <div class=\"row\">\r\n                      <label for=\"name\">Name</label>\r\n                      <input class=\"form-control\" type=\"text\" id=\"name\" v-model=\"user.name\" placeholder=\"Name\" @input=\"nameIsEntered=true\">\r\n                      <p v-if='!nameIsEntered'>'Name' is a mandatory field.</p>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <label for=\"surname\">Surname</label>\r\n                      <input class=\"form-control\" type=\"text\" id=\"surname\" v-model=\"user.surname\" placeholder=\"Surname\" @input=\"surnameIsEntered=true\">\r\n                      <p v-if='!surnameIsEntered'>'Surname' is a mandatory field.</p>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <label for=\"email\">Email</label>\r\n                      <input class=\"form-control\" disabled type=\"email\" id=\"email\" v-model=\"user.email\" placeholder=\"Email\" @input=\"emailIsEntered=true\">\r\n                      <p v-if='!emailIsEntered'>'Email' is a mandatory field.</p>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <label for=\"phone\">Phone</label>\r\n                      <vue-tel-input v-model=\"user.phone\" id=\"phone\" mode=\"international\" defaultCountry=\"RS\" :onlyCountries=onlyCountries @input=\"onTelephoneInput\"></vue-tel-input>\r\n                      <p v-if='!phoneIsValid'>Invalid phone number.</p>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-2\"></div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col main\">\r\n                <div class=\"row\">\r\n                  <div class=\"col-2\"></div>\r\n                  <div class=\"col-6\">\r\n                    <div class=\"row\">\r\n                      <label for=\"country\">Country</label>\r\n                      <input v-model=\"user.address.country\" class=\"form-control\" type=\"text\" id=\"country\" placeholder=\"Country\" @input=\"countryIsEntered=true\">\r\n                      <p v-if='!countryIsEntered'>'Country' is a mandatory field.</p>\r\n                      <p v-if='!addressIsValid'>Invalid address data.</p>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <label for=\"city\">City</label>\r\n                      <input v-model=\"user.address.city\" class=\"form-control\" type=\"text\" id=\"city\" placeholder=\"City\" @input=\"cityIsEntered=true\">\r\n                      <p v-if='!cityIsEntered'>'City' is a mandatory field.</p>\r\n                      <p v-if='!addressIsValid'>Invalid address data.</p>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <label for=\"street\">Street</label>\r\n                      <input v-model=\"user.address.street\" class=\"form-control\" type=\"text\" id=\"street\" placeholder=\"Street\" @input=\"streetIsEntered=true\">\r\n                      <p v-if='!streetIsEntered'>'Street' is a mandatory field.</p>\r\n                      <p v-if='!addressIsValid'>Invalid address data.</p>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <label for=\"number\">Number</label>\r\n                      <input v-model=\"user.address.number\" class=\"form-control\"  type=\"text\" id=\"number\" placeholder=\"House Number\" @input=\"numberIsEntered=true\">\r\n                      <p v-if='!numberIsEntered'>'Number' is a mandatory field.</p>\r\n                      <p v-if='!addressIsValid'>Invalid address data.</p>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-4\">\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"d-flex pt-3 justify-content-center\">\r\n            <router-link v-if=\"isVacationRentalOwner\" to=\"/vacationRentalOwner/profile\" class=\"btn btn-red mt-3 me-1\">Cancel</router-link>\r\n            <router-link v-else-if=\"isBoatOwner\" to=\"/boatOwner/profile\" class=\"btn btn-red mt-3 me-1\">Cancel</router-link>\r\n            <button type=\"button\" class=\"btn mt-3\" @click=\"submit\">Submit</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-2\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { VueTelInput }  from 'vue3-tel-input';\r\nimport 'vue3-tel-input/dist/vue3-tel-input.css';\r\nimport axios from \"axios\";\r\nimport {toggleProcessing} from \"@/components/state\";\r\nexport default {\r\n  name: \"EditPersonalData\",\r\n  components: {VueTelInput},\r\n  data(){\r\n    return {\r\n      onlyCountries: ['RS', 'BA', 'HR', 'ME', 'SI', 'MK'],\r\n      phoneInput: null,\r\n      user: {\r\n        name: null,\r\n        surname: null,\r\n        phone: null,\r\n        email: null,\r\n        address: {\r\n          street: null,\r\n          number: null,\r\n          city: null,\r\n          country: null,\r\n          latitude: null,\r\n          longitude: null\r\n        }\r\n      },\r\n      nameIsEntered: true,\r\n      surnameIsEntered: true,\r\n      emailIsEntered: true,\r\n      countryIsEntered: true,\r\n      cityIsEntered: true,\r\n      streetIsEntered: true,\r\n      numberIsEntered: true,\r\n      phoneIsEntered: true,\r\n      addressIsValid: true,\r\n      phoneIsValid: true,\r\n    }\r\n  },\r\n  computed: {\r\n    isNameEntered() {\r\n      return Boolean(this.user.name);\r\n    },\r\n    isSurnameEntered() {\r\n      return Boolean(this.user.surname);\r\n    },\r\n    isEmailEntered() {\r\n      return Boolean(this.user.email);\r\n    },\r\n    isCountryEntered() {\r\n      return Boolean(this.user.address.country);\r\n    },\r\n    isCityEntered() {\r\n      return Boolean(this.user.address.city);\r\n    },\r\n    isStreetEntered() {\r\n      return Boolean(this.user.address.street);\r\n    },\r\n    isNumberEntered() {\r\n      return Boolean(this.user.address.number);\r\n    },\r\n    isVacationRentalOwner() {\r\n      return this.$store.getters.user === \"vacationRentalOwner\";\r\n    },\r\n    isBoatOwner() {\r\n      return this.$store.getters.user === \"boatOwner\";\r\n    }\r\n  },\r\n  methods: {\r\n    submit(){\r\n      if (this.isDataEntered()) {\r\n        this.isDataCorrect();\r\n      }\r\n    },\r\n    editData() {\r\n      axios.put(\"/Users/editUser\", this.user, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + this.$store.getters.access_token,\r\n        }\r\n      })\r\n          .then(() => {\r\n            this.$notify({\r\n              title: \"Successful edit\",\r\n              text: \"You have successfully edited your personal data.\",\r\n              position: \"bottom right\",\r\n              type: \"success\"\r\n            });\r\n            toggleProcessing();\r\n            this.$router.push(\"/\");\r\n          })\r\n          .catch(error => {\r\n            if (!error.response) {\r\n              this.$notify({\r\n                title: \"Server error\",\r\n                text: \"Server is currently off. Please try again later...\",\r\n                type: \"error\"\r\n              });\r\n              toggleProcessing();\r\n            } else if (error.response.status === 500) {\r\n              this.$notify({\r\n                title: \"Internal Server Error\",\r\n                text: \"Something went wrong on the server! Please try again later...\",\r\n                position: \"bottom right\",\r\n                type: \"error\"\r\n              });\r\n              toggleProcessing();\r\n            }\r\n          })\r\n    },\r\n    isDataEntered() {\r\n      if (!this.isNameEntered) {\r\n        this.nameIsEntered = false;\r\n        return false;\r\n      }\r\n      if (!this.isSurnameEntered) {\r\n        this.surnameIsEntered = false;\r\n        return false;\r\n      }\r\n      if (!this.isEmailEntered) {\r\n        this.emailIsEntered = false;\r\n        return false;\r\n      }\r\n      if (!this.isCountryEntered) {\r\n        this.countryIsEntered = false;\r\n        return false;\r\n      }\r\n      if (!this.isCityEntered) {\r\n        this.cityIsEntered = false;\r\n        return false;\r\n      }\r\n      if (!this.isStreetEntered) {\r\n        this.streetIsEntered = false;\r\n        return false;\r\n      }\r\n      if (!this.isNumberEntered) {\r\n        this.numberIsEntered = false;\r\n        return false;\r\n      }\r\n      return true;\r\n    },\r\n    async isDataCorrect() {\r\n      if (!this.isPhoneValid()){\r\n        this.phoneIsValid = false;\r\n        return false;\r\n      } else {\r\n        this.validateAddress();\r\n      }\r\n    },\r\n    onTelephoneInput(phone, phoneObject) {\r\n      this.phoneIsEntered = true;\r\n      if (phoneObject?.valid) {\r\n        this.phoneIsValid = true;\r\n        this.user.phone = phoneObject.number;\r\n      } else if (phoneObject) {\r\n        this.user.phone = null;\r\n      }\r\n    },\r\n    isPhoneValid() {\r\n      return Boolean(this.user.phone);\r\n    },\r\n    validateAddress() {\r\n      toggleProcessing();\r\n      const apiKey = 'VrDrl5BjEA0Whvb-chHbFz96HV4qlCXB-yoiTRRLKno';\r\n      const url = 'https://geocoder.ls.hereapi.com/6.2/geocode.json' +\r\n          '?apiKey=' + apiKey +\r\n          '&housenumber=' + this.user.address.number +\r\n          '&street=' + this.user.address.street +\r\n          '&city=' + this.user.address.city +\r\n          '&country=' + this.user.address.country;\r\n      fetch(url)\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            const responseView = data.Response.View;\r\n            if (responseView.length === 0) {\r\n              this.addressIsValid = false;\r\n            }\r\n            else {\r\n              const location = responseView[0].Result[0].Location.DisplayPosition;\r\n              const address = responseView[0].Result[0].Location.Address;\r\n              this.user.address.city = this.transliterate(address.City);\r\n              this.user.address.country = this.transliterate(address.AdditionalData[0].value);\r\n              this.user.address.street = this.transliterate(address.Street);\r\n              this.user.address.longitude = location.Longitude;\r\n              this.user.address.latitude = location.Latitude;\r\n              this.addressIsValid = true;\r\n              this.editData();\r\n            }\r\n          })\r\n          .catch(() => {\r\n            this.addressIsValid = false;\r\n          });\r\n    },\r\n    transliterate(word) {\r\n      let letters = {\"Б\":\"B\", \"В\":\"V\", \"Г\":\"G\", \"Д\":\"D\", \"Ђ\":\"Đ\", \"Ж\":\"Ž\", \"З\":\"Z\", \"И\":\"I\", \"К\":\"K\", \"Л\":\"L\", \"Љ\":\"Lj\", \"М\":\"M\", \"Н\":\"N\", \"Њ\":\"Nj\", \"П\":\"P\",\r\n        \"Р\":\"R\", \"С\":\"S\", \"Ћ\":\"Ć\", \"У\":\"U\", \"Ф\":\"F\", \"Х\":\"H\", \"Ц\":\"C\", \"Ч\":\"Č\", \"Џ\":\"Dž\", \"Ш\":\"Š\", \"б\":\"b\", \"в\":\"v\", \"г\":\"g\", \"д\":\"d\", \"ђ\":\"đ\", \"ж\":\"ž\", \"з\":\"z\", \"и\":\"i\", \"к\":\"k\", \"л\":\"l\", \"љ\":\"lj\", \"м\":\"m\", \"н\":\"n\", \"њ\":\"nj\", \"п\":\"p\",\r\n        \"р\":\"r\", \"с\":\"s\", \"т\":\"t\", \"ћ\":\"ć\", \"у\":\"u\", \"ф\":\"f\", \"х\":\"h\", \"ц\":\"c\", \"ч\":\"č\", \"џ\":\"dž\", \"ш\":\"š\"};\r\n      return word.split('').map(function (char) {\r\n        return letters[char] || char;\r\n      }).join(\"\");\r\n    }\r\n  },\r\n  mounted(){\r\n    toggleProcessing();\r\n    axios.get(\"/Users/getUser\", {\r\n      headers: {\r\n        Authorization: \"Bearer \" + this.$store.getters.access_token,\r\n      }\r\n    })\r\n        .then(response => {\r\n          this.user = response.data;\r\n          toggleProcessing();\r\n        })\r\n        .catch(() =>{\r\n          this.$notify({\r\n            title: \"Server error\",\r\n            text: \"Server is currently off. Please try again later...\",\r\n            type: \"error\"\r\n          });\r\n          toggleProcessing();\r\n        })\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\ntextarea {\r\n  resize: none;\r\n  width: 100%;\r\n  text-align: justify;\r\n}\r\ninput[type='text'], input[type='email'] {\r\n  width: 100%;\r\n  border-color: #008970;\r\n}\r\ninput::placeholder {\r\n  color: grey;\r\n}\r\nh3 {\r\n  text-align: center;\r\n}\r\np {\r\n  color: #e23c52;\r\n}\r\n\r\nlabel {\r\n  color: #008970;\r\n  font-style: italic;\r\n  font-size: large;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}